"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[372],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(n),h=o,f=p["".concat(c,".").concat(h)]||p[h]||d[h]||s;return n?r.createElement(f,a(a({ref:t},u),{},{components:n})):r.createElement(f,a({ref:t},u))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var l=2;l<s;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2142:(e,t,n)=>{n.d(t,{S:()=>N});var r=n(7294),o=["angular-cli","create-react-app","html","javascript","node","polymer","typescript","vue"],s={clickToLoad:function(e){return i("ctl",e)},devToolsHeight:function(e){return c("devToolsHeight",e)},forceEmbedLayout:function(e){return i("embed",e)},hideDevTools:function(e){return i("hideDevTools",e)},hideExplorer:function(e){return i("hideExplorer",e)},hideNavigation:function(e){return i("hideNavigation",e)},showSidebar:function(e){return function(e,t){return"boolean"==typeof t?"showSidebar="+(t?"1":"0"):""}(0,e)},openFile:function(e){return function(e,t){return(Array.isArray(t)?t:[t]).filter((function(e){return"string"==typeof e&&""!==e.trim()})).map((function(e){return"file="+encodeURIComponent(e.trim())}))}(0,e).join("&")},terminalHeight:function(e){return c("terminalHeight",e)},theme:function(e){return l("theme",["light","dark"],e)},view:function(e){return l("view",["preview","editor"],e)}};function a(e){void 0===e&&(e={});var t=Object.entries(e).map((function(e){var t=e[0],n=e[1];return null!=n&&s.hasOwnProperty(t)?s[t](n):""})).filter(Boolean);return t.length?"?"+t.join("&"):""}function i(e,t){return!0===t?e+"=1":""}function c(e,t){return"number"==typeof t&&t>=0&&t<=100?e+"="+Math.round(t):""}function l(e,t,n){return"string"==typeof n&&t.includes(n)?e+"="+n:""}function u(){return Math.random().toString(36).slice(2,6)+Math.random().toString(36).slice(2,6)}function d(e,t){var n={forceEmbedLayout:!0};return t&&"object"==typeof t&&Object.assign(n,t),""+p(n)+e+a(n)}function p(e){return void 0===e&&(e={}),"string"==typeof e.origin?e.origin:"https://stackblitz.com"}function h(e,t,n){if(!t||!e||!e.parentNode)throw new Error("Invalid Element");e.id&&(t.id=e.id),e.className&&(t.className=e.className),function(e,t){t&&"object"==typeof t&&(Object.hasOwnProperty.call(t,"height")&&(e.height=""+t.height),Object.hasOwnProperty.call(t,"width")&&(e.width=""+t.width)),e.height||(e.height="300"),e.width||e.setAttribute("style","width:100%;")}(t,n),e.parentNode.replaceChild(t,e)}function f(e){if("string"==typeof e){var t=document.getElementById(e);if(!t)throw new Error("Could not find element with id '"+e+"'");return t}if(e instanceof HTMLElement)return e;throw new Error("Invalid element: "+e)}function m(){return m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},m.apply(this,arguments)}var g=function(){function e(e){this.port=void 0,this.pending={},this.port=e,this.port.onmessage=this.messageListener.bind(this)}var t=e.prototype;return t.request=function(e){var t=this,n=e.type,r=e.payload,o=u();return new Promise((function(e,s){t.pending[o]={resolve:e,reject:s},t.port.postMessage({type:n,payload:m({},r,{__reqid:o})})}))},t.messageListener=function(e){var t;if("string"==typeof(null==(t=e.data.payload)?void 0:t.__reqid)){var n=e.data,r=n.type,o=n.payload,s=o.__reqid,a=o.__error;this.pending[s]&&(o.__success?this.pending[s].resolve(function(e){var t=m({},e);return delete t.__reqid,delete t.__success,delete t.__error,Object.keys(t).length?t:null}(o)):this.pending[s].reject(a?r+": "+a:r),delete this.pending[s])}},e}(),v=function(){function e(e,t){var n=this;this._rdc=void 0,this.editor={openFile:function(e){return n._rdc.request({type:"SDK_OPEN_FILE",payload:{path:e}})},setCurrentFile:function(e){return n._rdc.request({type:"SDK_SET_CURRENT_FILE",payload:{path:e}})},setTheme:function(e){return n._rdc.request({type:"SDK_SET_UI_THEME",payload:{theme:e}})},setView:function(e){return n._rdc.request({type:"SDK_SET_UI_VIEW",payload:{view:e}})},showSidebar:function(e){return void 0===e&&(e=!0),n._rdc.request({type:"SDK_TOGGLE_SIDEBAR",payload:{visible:e}})}},this.preview={origin:"",getUrl:function(){return n._rdc.request({type:"SDK_GET_PREVIEW_URL",payload:{}}).then((function(e){var t;return null!=(t=null==e?void 0:e.url)?t:null}))},setUrl:function(e){if(void 0===e&&(e="/"),"string"!=typeof e||!e.startsWith("/"))throw new Error("Invalid argument: expected a path starting with '/', got '"+e+"'");return n._rdc.request({type:"SDK_SET_PREVIEW_URL",payload:{path:e}})}},this._rdc=new g(e),Object.defineProperty(this.preview,"origin",{value:"string"==typeof t.previewOrigin?t.previewOrigin:null,writable:!1})}var t=e.prototype;return t.applyFsDiff=function(e){var t=function(e){return null!==e&&"object"==typeof e};if(!t(e)||!t(e.create))throw new Error("Invalid diff object: expected diff.create to be an object.");if(!Array.isArray(e.destroy))throw new Error("Invalid diff object: expected diff.create to be an array.");return this._rdc.request({type:"SDK_APPLY_FS_DIFF",payload:e})},t.getDependencies=function(){return this._rdc.request({type:"SDK_GET_DEPS_SNAPSHOT",payload:{}})},t.getFsSnapshot=function(){return this._rdc.request({type:"SDK_GET_FS_SNAPSHOT",payload:{}})},e}(),y=[],q=function(e){var t=this;this.element=void 0,this.id=void 0,this.pending=void 0,this.vm=void 0,this.id=u(),this.element=e,this.pending=new Promise((function(e,n){var r=function(n){var r=n.data;"SDK_INIT_SUCCESS"===(null==r?void 0:r.action)&&r.id===t.id&&(t.vm=new v(n.ports[0],r.payload),e(t.vm),s())},o=function(){var e;null==(e=t.element.contentWindow)||e.postMessage({action:"SDK_INIT",id:t.id},"*")};function s(){window.clearInterval(i),window.removeEventListener("message",r)}window.addEventListener("message",r),o();var a=0,i=window.setInterval((function(){if(t.vm)s();else{if(a>=20)return s(),n("Timeout: Unable to establish a connection with the StackBlitz VM"),void y.forEach((function(e,n){e.id===t.id&&y.splice(n,1)}));a++,o()}}),500)})),y.push(this)};function k(e,t){var n=document.createElement("input");return n.type="hidden",n.name=e,n.value=t,n}function C(e){if(!o.includes(e.template)){var t=o.map((function(e){return"'"+e+"'"})).join(", ");console.warn("Unsupported project.template: must be one of "+t)}var n="node"===e.template,r=document.createElement("form");return r.method="POST",r.setAttribute("style","display:none!important;"),r.appendChild(k("project[title]",e.title)),r.appendChild(k("project[description]",e.description)),r.appendChild(k("project[template]",e.template)),e.dependencies&&(n?console.warn("Invalid project.dependencies: dependencies must be provided as a 'package.json' file when using the 'node' template."):r.appendChild(k("project[dependencies]",JSON.stringify(e.dependencies)))),e.settings&&r.appendChild(k("project[settings]",JSON.stringify(e.settings))),Object.keys(e.files).forEach((function(t){"string"==typeof e.files[t]&&r.appendChild(k("project[files]["+t+"]",e.files[t]))})),r}function w(e){var t,n,r,o;return null!=e&&e.contentWindow?(null!=(o=(n=e)instanceof Element?"element":"id",t=null!=(r=y.find((function(e){return e[o]===n})))?r:null)?t:new q(e)).pending:Promise.reject("Provided element is not an iframe.")}var b=function(e,t,n){var r,o=f(e),s=function(e,t){var n=C(e);return n.action=d("/run",t),n.id="sb","<html><head><title></title></head><body>"+n.outerHTML+"<script>document.getElementById('"+n.id+"').submit();<\/script></body></html>"}(t,n),a=document.createElement("iframe");return h(o,a,n),null==(r=a.contentDocument)||r.write(s),w(a)},T=n(2949);const E={core:{"@ngneat/elf":"latest"},entities:{"@ngneat/elf-entities":"latest"},requests:{"@ngneat/elf-requests":"latest"},pagination:{"@ngneat/elf-pagination":"latest"},devtools:{"@ngneat/elf-devtools":"latest"},persist:{"@ngneat/elf-persist-state":"latest"},history:{"@ngneat/elf-state-history":"latest"},rxjs:{rxjs:"latest"},immer:{immer:"latest"}};function N(e){let{src:t,packages:n=[]}=e;const o=(0,r.useRef)(),s=(0,r.useRef)(),a=["core","rxjs",...n],{colorMode:i}=(0,T.I)();return(0,r.useEffect)((()=>{const e=a.reduce(((e,t)=>(Object.assign(e,E[t]),e)),{});b(o.current,{description:"this is descrption",title:"Elf Core",files:{"index.html":"","index.ts":t},template:"typescript",dependencies:e,settings:{compile:{clearConsole:!0}}},{hideDevTools:!1,devToolsHeight:99,theme:i,height:"500px"}).then((e=>{s.current=e.editor}))}),[]),(0,r.useEffect)((()=>{s.current&&s.current.setTheme(i)}),[i]),r.createElement("section",{style:{height:"500px"}},r.createElement("div",{ref:o}))}},4196:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>u});var r=n(7462),o=(n(7294),n(3905));var s=n(2142);const a={},i="Cache",c={unversionedId:"features/requests/requests-cache",id:"features/requests/requests-cache",title:"Cache",description:"Using this feature, you can manage the cache status of API calls in your store. First, you need to install the package",source:"@site/docs/features/requests/requests-cache.mdx",sourceDirName:"features/requests",slug:"/features/requests/requests-cache",permalink:"/elf/docs/features/requests/requests-cache",draft:!1,editUrl:"https://github.com/ngneat/elf/docusaurus/edit/main/website/docs/features/requests/requests-cache.mdx",tags:[],version:"current",frontMatter:{}},l={},u=[{value:"Queries",id:"queries",level:2},{value:"<code>selectRequestCache</code>",id:"selectrequestcache",level:3},{value:"<code>getRequestCache</code>",id:"getrequestcache",level:3},{value:"<code>selectIsRequestCached</code>",id:"selectisrequestcached",level:3},{value:"Mutations",id:"mutations",level:2},{value:"<code>updateRequestCache</code>",id:"updaterequestcache",level:3},{value:"<code>updateRequestsCache</code>",id:"updaterequestscache",level:3},{value:"<code>clearRequestsCache</code>",id:"clearrequestscache",level:3}],d={toc:u};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"cache"},"Cache"),(0,o.kt)("p",null,"Using this feature, you can manage the cache status of API calls in your store. First, you need to install the package\nby using the CLI command ",(0,o.kt)("inlineCode",{parentName:"p"},"elf-cli install")," and selecting the requests package, or via npm:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @ngneat/elf-requests\n")),(0,o.kt)("p",null,"To use this feature, provide the ",(0,o.kt)("inlineCode",{parentName:"p"},"withRequestsCache")," props factory function in the ",(0,o.kt)("inlineCode",{parentName:"p"},"createStore")," call:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.repository.ts"',title:'"todos.repository.ts"'},"import { createStore } from '@ngneat/elf';\nimport { withEntities } from '@ngneat/elf-entities';\nimport { withRequestsCache } from '@ngneat/elf-requests';\n\ninterface Todo {\n  id: number;\n  label: string;\n}\n\nconst todosStore = createStore(\n  { name: 'todos' },\n  withEntities<Todo>(),\n  // You can pass the keys type\n  // highlight-next-line\n  withRequestsCache<'todo'|`todo-${string}`>()\n);\n")),(0,o.kt)("p",null,"Now we can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"createRequestsCacheOperator")," function that takes a store and returns a custom operator."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n  withRequestsCache,\n  createRequestsCacheOperator,\n} from '@ngneat/elf-requests';\n\nconst todosStore = createStore(\n  { name: 'todos' },\n  withEntities<Todo>(),\n  withRequestsCache<'todo'|`todo-${string}`>()\n);\n\nexport const skipWhileTodosCached = createRequestsCacheOperator(todosStore);\n")),(0,o.kt)("p",null,"We can use the resulting operator and pass a unique key to identify the request. This enables skipping the API call if the passed key is located in the store cache."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.service.ts"',title:'"todos.service.ts"'},"import { setTodos, skipWhileTodosCached } from './todos.repository';\n\nexport function fetchTodos() {\n  return http.get(todosUrl).pipe(\n    tap(setTodos(todos)),\n    // highlight-next-line\n    skipWhileTodosCached('todos')\n  );\n}\n")),(0,o.kt)("p",null,"Use it in tandem with ",(0,o.kt)("inlineCode",{parentName:"p"},"updateRequestsCache"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.repository.ts"',title:'"todos.repository.ts"'},"import { updateRequestCache } from '@ngneat/elf-requests';\nimport { setEntities } from '@ngneat/elf-entities';\n\nexport function setTodos(todos: Todo[]) {\n  store.update(\n    // highlight-next-line\n    updateRequestCache('todos'),\n    setEntities(todos)\n  );\n}\n")),(0,o.kt)("p",null,"Passing a value as the third parameter ensures the ",(0,o.kt)("inlineCode",{parentName:"p"},"store")," will only skip the API call if the value matches the\none passed. Values can be 'none', 'partial' or 'full':"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.repository.ts"',title:'"todos.repository.ts"'},"import { updateRequestCache } from '@ngneat/elf-requests';\n\nexport function setTodos(todos: Todo[]) {\n  store.update(\n    // highlight-next-line\n    updateRequestCache('todos', { value: 'partial' }),\n    setEntities(todos)\n  );\n}\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.service.ts"',title:'"todos.service.ts"'},"import { setTodos, skipWhileTodosCached } from './todos.repository';\n\nexport function fetchTodos() {\n  return http.get(todosUrl).pipe(\n    tap((todos) => setTodos(todos)),\n    // highlight-next-line\n    skipWhileTodosCached('todos', { value: 'partial' })\n  );\n}\n")),(0,o.kt)("p",null,"In addition to value, you can pass in the same object a ",(0,o.kt)("inlineCode",{parentName:"p"},"returnSource")," which will be returned by the operator if the\nrequest is cached. The default return value is ",(0,o.kt)("inlineCode",{parentName:"p"},"EMPTY")," observable."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.service.ts"',title:'"todos.service.ts"'},"import { skipWhileTodosCached, setTodos } from './todos.repository';\n\nexport function fetchTodos() {\n  return http.get(todosUrl).pipe(\n    tap((todos) => setTodos(todos)),\n    // highlight-next-line\n    skipWhileTodosCached('todos', { returnSource: of([]) })\n  );\n}\n")),(0,o.kt)(s.S,{src:"import { createStore } from '@ngneat/elf';\nimport { setEntities, withEntities } from '@ngneat/elf-entities';\nimport {\n  createRequestsCacheOperator,\n  selectRequestCache,\n  updateRequestCache,\n  withRequestsCache,\n} from '@ngneat/elf-requests';\nimport { fromFetch } from 'rxjs/fetch';\nimport { tap } from 'rxjs/operators';\n\ninterface Todo {\n  id: number;\n  label: string;\n}\n\nconst todosStore = createStore(\n  { name: 'todos' },\n  withEntities<Todo>(),\n  withRequestsCache<'todos'>()\n);\n\nconst skipWhileTodosCached = createRequestsCacheOperator(todosStore);\n\nexport function setTodos(todos: Todo[]) {\n  todosStore.update(updateRequestCache('todos'), setEntities(todos));\n}\n\ntodosStore.pipe(selectRequestCache('todos')).subscribe((status) => {\n  console.log(status);\n});\n\nfunction fetchTodos() {\n  return fromFetch<Todo[]>('https://jsonplaceholder.typicode.com/todos', {\n    selector: (response) => response.json(),\n  }).pipe(tap(setTodos), skipWhileTodosCached('todos'));\n}\n\nfetchTodos().subscribe(() => console.log('fetched'));\n\n// Use `setTimeout` to simulate a later call\nsetTimeout(() => {\n  fetchTodos().subscribe(() => console.log('You should not see me'));\n}, 1000);\n",packages:["entities","requests"],mdxType:"LiveDemo"}),(0,o.kt)("br",null),(0,o.kt)("p",null,"You can monitor and change the request cache status for your APIs using the following queries and mutations:"),(0,o.kt)("h2",{id:"queries"},"Queries"),(0,o.kt)("h3",{id:"selectrequestcache"},(0,o.kt)("inlineCode",{parentName:"h3"},"selectRequestCache")),(0,o.kt)("p",null,"Select the cache status of the provided request key:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectRequestCache } from '@ngneat/elf-requests';\n\ntodosCacheStatus$ = store.pipe(selectRequestCache('todos'));\n")),(0,o.kt)("h3",{id:"getrequestcache"},(0,o.kt)("inlineCode",{parentName:"h3"},"getRequestCache")),(0,o.kt)("p",null,"Get the cache status of the provided request key:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { getRequestCache } from '@ngneat/elf-requests';\n\ntodosCacheStatus = store.query(getRequestCache('todos'));\n")),(0,o.kt)("h3",{id:"selectisrequestcached"},(0,o.kt)("inlineCode",{parentName:"h3"},"selectIsRequestCached")),(0,o.kt)("p",null,"Select whether the cache status of the provided request key isn't ",(0,o.kt)("inlineCode",{parentName:"p"},"none"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectIsRequestCached } from '@ngneat/elf-requests';\n\nconst isCached$ = store.pipe(selectIsRequestCached('todos'));\nconst isPartialCached$ = store.pipe(\n  selectIsRequestCached('todos', { value: 'partial' })\n);\n")),(0,o.kt)("p",null,"Get whether the cache status of the provided request key isn't ",(0,o.kt)("inlineCode",{parentName:"p"},"none"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { isRequestCached } from '@ngneat/elf-requests';\n\nconst isCached = store.query(isRequestCached('todos'));\nconst isPartialCached = store.query(\n  isRequestCached('todos', { value: 'partial' })\n);\n")),(0,o.kt)("h2",{id:"mutations"},"Mutations"),(0,o.kt)("h3",{id:"updaterequestcache"},(0,o.kt)("inlineCode",{parentName:"h3"},"updateRequestCache")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { updateRequestCache } from '@ngneat/elf-requests';\n\nstore.update(updateRequestCache('todos'));\nstore.update(updateRequestCache('todos', { value: 'partial' }));\nstore.update(updateRequestCache('todos', { value: 'none' }));\nstore.update(updateRequestCache('todos', { ttl: 1000 }));\n")),(0,o.kt)("p",null,"If you pass ",(0,o.kt)("inlineCode",{parentName:"p"},"ttl")," (time to live) when updating a cache record, that represents the time (in milliseconds) that ",(0,o.kt)("inlineCode",{parentName:"p"},"key")," will\nhave the value that was set (afterward, it reverts to 'none')."),(0,o.kt)("h3",{id:"updaterequestscache"},(0,o.kt)("inlineCode",{parentName:"h3"},"updateRequestsCache")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { updateRequestsCache } from '@ngneat/elf-requests';\n\nstore.update(\n  updateRequestsCache({\n    keyOne: {\n      value: 'partial',\n    },\n  })\n);\n\nstore.update(updateRequestsCache(['keyOne', 'keyTwo'], { value: 'partial' }));\n")),(0,o.kt)("h3",{id:"clearrequestscache"},(0,o.kt)("inlineCode",{parentName:"h3"},"clearRequestsCache")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { clearRequestsCache } from '@ngneat/elf-requests';\n\nstore.update(clearRequestsCache());\n")))}p.isMDXComponent=!0}}]);