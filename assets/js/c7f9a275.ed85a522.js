"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[420],{858:(e,t,a)=>{a.d(t,{S:()=>i});var s=a(7294),n=a(9979),r=a(2949);const o={core:{"@ngneat/elf":"latest"},entities:{"@ngneat/elf-entities":"latest"},requests:{"@ngneat/elf-requests":"latest"},pagination:{"@ngneat/elf-pagination":"latest"},devtools:{"@ngneat/elf-devtools":"latest"},persist:{"@ngneat/elf-persist-state":"latest"},history:{"@ngneat/elf-state-history":"latest"},rxjs:{rxjs:"latest"},immer:{immer:"latest"}};function i(e){let{src:t,packages:a=[]}=e;const i=(0,s.useRef)(),l=(0,s.useRef)(),p=["core","rxjs",...a],{colorMode:u}=(0,r.I)();return(0,s.useEffect)((()=>{const e=p.reduce(((e,t)=>(Object.assign(e,o[t]),e)),{});n.Z.embedProject(i.current,{description:"this is descrption",title:"Elf Core",files:{"index.html":"","index.ts":t},template:"typescript",dependencies:e,settings:{compile:{clearConsole:!0}}},{hideDevTools:!1,devToolsHeight:99,theme:u,height:"500px"}).then((e=>{l.current=e.editor}))}),[]),(0,s.useEffect)((()=>{l.current&&l.current.setTheme(u)}),[u]),s.createElement("section",{style:{height:"500px"}},s.createElement("div",{ref:i}))}},9271:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var s=a(7462),n=(a(7294),a(3905));var r=a(858);const o={},i="Persist State",l={unversionedId:"features/persist-state",id:"features/persist-state",title:"Persist State",description:"The persistState() function gives you the ability to persist some of the app\u2019s state, by saving it to localStorage/sessionStorage or anything that implements the StorageEngine API, and restore it after a refresh.",source:"@site/docs/features/persist-state.mdx",sourceDirName:"features",slug:"/features/persist-state",permalink:"/elf/docs/features/persist-state",draft:!1,editUrl:"https://github.com/ngneat/elf/docusaurus/edit/main/website/docs/features/persist-state.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Pagination",permalink:"/elf/docs/features/pagination"},next:{title:"State History",permalink:"/elf/docs/features/history/"}},p={},u=[{value:"Async Support",id:"async-support",level:2},{value:"Excluding keys from the state",id:"excluding-keys-from-the-state",level:2},{value:"Performance Optimization",id:"performance-optimization",level:2}],c={toc:u};function d(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,s.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"persist-state"},"Persist State"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"persistState()")," function gives you the ability to persist some of the app\u2019s state, by saving it to ",(0,n.kt)("inlineCode",{parentName:"p"},"localStorage/sessionStorage")," or anything that implements the ",(0,n.kt)("inlineCode",{parentName:"p"},"StorageEngine")," API, and restore it after a refresh."),(0,n.kt)("p",null,"First, you need to install the package by using the CLI command ",(0,n.kt)("inlineCode",{parentName:"p"},"elf-cli install")," and selecting the persist-state package, or via npm:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @ngneat/elf-persist-state\n")),(0,n.kt)("p",null,"To use it you should call the ",(0,n.kt)("inlineCode",{parentName:"p"},"persistState()")," function, passing the store and the options:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { createStore, withProps, select } from '@ngneat/elf';\nimport {\n  persistState,\n  localStorageStrategy,\n  sessionStorageStrategy,\n} from '@ngneat/elf-persist-state';\n\ninterface AuthProps {\n  user: { id: string } | null;\n}\n\nconst authStore = createStore({ name }, withProps<AuthProps>({ user: null }));\n\nexport const persist = persistState(authStore, {\n  key: 'auth',\n  storage: localStorageStrategy,\n});\n\nexport const user$ = authStore.pipe(select((state) => state.user));\n")),(0,n.kt)("p",null,"As the second parameter you should pass a ",(0,n.kt)("inlineCode",{parentName:"p"},"Options")," object, which can be used to define the following:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"storage"),": an Object with ",(0,n.kt)("inlineCode",{parentName:"li"},"setItem"),", ",(0,n.kt)("inlineCode",{parentName:"li"},"getItem")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"removeItem")," method for storing the state (required)."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"source"),": a method that receives the store and return what to save from it (by default - the entire store)."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"preStoreInit"),": a method that run upon initializing the store with a saved value, used for any required modifications before the value is set."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"key"),": the name under which the store state is saved (by default - the store name plus a ",(0,n.kt)("inlineCode",{parentName:"li"},"@store")," suffix)."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"runGuard")," - returns whether the actual implementation should be run. The default is ",(0,n.kt)("inlineCode",{parentName:"li"},"() => typeof window !== 'undefined'"))),(0,n.kt)(r.S,{src:"import { createStore, select, withProps } from '@ngneat/elf';\nimport { localStorageStrategy, persistState } from '@ngneat/elf-persist-state';\n\ninterface AuthProps {\n  user: { id: string } | null;\n}\n\nconst authStore = createStore(\n  { name: 'auth' },\n  withProps<AuthProps>({ user: null })\n);\n\nexport const persist = persistState(authStore, {\n  key: 'auth',\n  storage: localStorageStrategy,\n});\n\nconst user$ = authStore.pipe(select((state) => state.user));\n\nuser$.subscribe(console.log);\n\n// Should be the value after a refresh\nsetTimeout(() => {\n  authStore.update((state) => ({\n    ...state,\n    user: { id: '1' },\n  }));\n}, 1000);\n",packages:["persist"],mdxType:"LiveDemo"}),(0,n.kt)("br",null),"Elf also exposes the `initialized$` observable. This observable emits after Elf initialized the stores based on the storage's value. For example:",(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { persistState, localStorageStrategy } from '@ngneat/elf-persist-state';\n\nconst instance = persistState(todoStore, {\n  key: 'todos',\n  storage: localStorageStrategy,\n});\n\ninstance.initialized$.subscribe(console.log);\n")),(0,n.kt)("h2",{id:"async-support"},"Async Support"),(0,n.kt)("p",null,"This gives you the option to save a store\u2019s value to a persistent storage, such as indexDB, websql, or any other asynchronous API. Here\u2019s an example that leverages ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/localForage/localForage"},"localForage"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import * as localForage from 'localforage';\n\nlocalForage.config({\n  driver: localForage.INDEXEDDB,\n  name: 'myApp',\n  version: 1.0,\n  storeName: 'auth',\n});\n\nexport const persist = persistState(authStore, {\n  key: 'auth',\n  storage: localForage,\n});\n")),(0,n.kt)("h2",{id:"excluding-keys-from-the-state"},"Excluding keys from the state"),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"excludeKeys()")," operator can be used to exclude keys from the state:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n  excludeKeys,\n  persistState,\n  localStorageStrategy,\n} from '@ngneat/elf-persist-state';\n\npersistState(todoStore, {\n  key: 'todos',\n  storage: localStorageStrategy,\n  source: () => todoStore.pipe(excludeKeys(['ids', 'entities'])),\n});\n")),(0,n.kt)("h2",{id:"performance-optimization"},"Performance Optimization"),(0,n.kt)("p",null,"By default, the plugin will update the storage upon each store's change. Some applications perform multiple updates in a second, and update the storage on each change can be costly."),(0,n.kt)("p",null,"For such cases, it's recommended to use the ",(0,n.kt)("inlineCode",{parentName:"p"},"debounceTime")," operator. For example:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-ts"},"import { persistState, localStorageStrategy } from '@ngneat/elf-persist-state';\nimport { debounceTime } from 'rxjs/operators';\npersistState(todoStore, {\n  key: 'todos',\n  storage: localStorageStrategy,\n  source: () => todoStore.pipe(debounceTime(1000)),\n});\n")))}d.isMDXComponent=!0}}]);