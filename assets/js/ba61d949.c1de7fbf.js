"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[415],{5680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>y});var a=t(6540);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=s(t),g=l,y=u["".concat(p,".").concat(g)]||u[g]||d[g]||r;return t?a.createElement(y,o(o({ref:n},c),{},{components:t})):a.createElement(y,o({ref:n},c))}));function y(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var r=t.length,o=new Array(r);o[0]=g;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[u]="string"==typeof e?e:l,o[1]=i;for(var s=2;s<r;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},9332:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>s});var a=t(8168),l=(t(6540),t(5680));const r={},o="CLI",i={unversionedId:"cli",id:"cli",title:"CLI",description:"Elf comes with a CLI that enables a fast and easy setup of your store. It offers the following commands:",source:"@site/docs/cli.mdx",sourceDirName:".",slug:"/cli",permalink:"/elf/docs/cli",draft:!1,editUrl:"https://github.com/ngneat/elf/docusaurus/edit/main/website/docs/cli.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Using Immer",permalink:"/elf/docs/immer"},next:{title:"Managing Side Effects",permalink:"/elf/docs/side-effects"}},p={},s=[{value:"Install",id:"install",level:2},{value:"Repo",id:"repo",level:2},{value:"Config",id:"config",level:3},{value:"<code>repoTemplate</code>",id:"repotemplate",level:3},{value:"<code>inlineStoreInClass</code>",id:"inlinestoreinclass",level:3},{value:"<code>idKey</code>",id:"idkey",level:3},{value:"<code>repoLibrary</code>",id:"repolibrary",level:3},{value:"<code>plugins</code>",id:"plugins",level:3},{value:"<code>@ngneat/elf-cli-ng</code>",id:"ngneatelf-cli-ng",level:4},{value:"fuzzypath",id:"fuzzypath",level:3}],c={toc:s},u="wrapper";function d(e){let{components:n,...t}=e;return(0,l.yg)(u,(0,a.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,l.yg)("h1",{id:"cli"},"CLI"),(0,l.yg)("p",null,"Elf comes with a CLI that enables a fast and easy setup of your store. It offers the following commands:"),(0,l.yg)("h2",{id:"install"},"Install"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"$ npx @ngneat/elf-cli install\n")),(0,l.yg)("p",null,"Using the above command, you can choose which packages to install. Your package manager will be detected and used for installation."),(0,l.yg)("h2",{id:"repo"},"Repo"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-bash"},"$ npx @ngneat/elf-cli repo\n$ npx @ngneat/elf-cli repo --dry-run\n")),(0,l.yg)("p",null,"Using the above command, you can create a ",(0,l.yg)("inlineCode",{parentName:"p"},"repository")," file. All the boilerplate will be created for you based on which ",(0,l.yg)("em",{parentName:"p"},"features")," you select."),(0,l.yg)("h3",{id:"config"},"Config"),(0,l.yg)("p",null,"You can set the configuration by providing the ",(0,l.yg)("inlineCode",{parentName:"p"},"package.json")," file:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'{\n  "elf": {\n    "cli": {\n      "repoTemplate": "class",\n      "inlineStoreInClass": true,\n      "idKey": "_id",\n      "repoLibrary": "state",\n      "plugins": []\n    }\n  }\n}\n')),(0,l.yg)("h3",{id:"repotemplate"},(0,l.yg)("inlineCode",{parentName:"h3"},"repoTemplate")),(0,l.yg)("p",null,"By default, the ",(0,l.yg)("inlineCode",{parentName:"p"},"repository")," file generates exported functions. If you prefer to use a class, for instance, when working with Angular, you can set this option to ",(0,l.yg)("inlineCode",{parentName:"p"},"class"),"."),(0,l.yg)("h3",{id:"inlinestoreinclass"},(0,l.yg)("inlineCode",{parentName:"h3"},"inlineStoreInClass")),(0,l.yg)("p",null,"By default, a store is created outside of the class. If you prefer creating the store inside a class you can set this option to ",(0,l.yg)("inlineCode",{parentName:"p"},"true")," or ",(0,l.yg)("inlineCode",{parentName:"p"},"withoutConstructor"),". It might be helpful when you create a ",(0,l.yg)("inlineCode",{parentName:"p"},"component store")," or you want to set the initial value to the store given via Angular DI (Works only with ",(0,l.yg)("inlineCode",{parentName:"p"},"repoTemplate")," set as ",(0,l.yg)("inlineCode",{parentName:"p"},"class"),")."),(0,l.yg)("h3",{id:"idkey"},(0,l.yg)("inlineCode",{parentName:"h3"},"idKey")),(0,l.yg)("p",null,"The default ",(0,l.yg)("inlineCode",{parentName:"p"},"idKey")," for the package ",(0,l.yg)("inlineCode",{parentName:"p"},"@ngneat/elf-entities")," is ",(0,l.yg)("inlineCode",{parentName:"p"},"id"),". By setting this option, you can change it globally."),(0,l.yg)("h3",{id:"repolibrary"},(0,l.yg)("inlineCode",{parentName:"h3"},"repoLibrary")),(0,l.yg)("p",null,"The ",(0,l.yg)("inlineCode",{parentName:"p"},"repository")," file is created by default at the root path you specify (i.e., ",(0,l.yg)("inlineCode",{parentName:"p"},"flat"),"). If you set this option, you can specify the ",(0,l.yg)("inlineCode",{parentName:"p"},"directory")," you want."),(0,l.yg)("h3",{id:"plugins"},(0,l.yg)("inlineCode",{parentName:"h3"},"plugins")),(0,l.yg)("p",null,"Specify which plugins you want to use."),(0,l.yg)("h4",{id:"ngneatelf-cli-ng"},(0,l.yg)("inlineCode",{parentName:"h4"},"@ngneat/elf-cli-ng")),(0,l.yg)("p",null,"Install the package, and add the following code:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-json",metastring:'title="package.json"',title:'"package.json"'},'{\n  "elf": {\n    "cli": {\n      "repoTemplate": "class",\n      "plugins": ["@ngneat/elf-cli-ng"]\n    }\n  }\n}\n')),(0,l.yg)("p",null,"The plugin will add the ",(0,l.yg)("inlineCode",{parentName:"p"},"Injectable")," decorator to the ",(0,l.yg)("inlineCode",{parentName:"p"},"repository")," class."),(0,l.yg)("h3",{id:"fuzzypath"},"fuzzypath"),(0,l.yg)("p",null,"A ",(0,l.yg)("a",{parentName:"p",href:"https://github.com/adelsz/inquirer-fuzzy-path"},"fuzzy")," file/directory search and selection prompt. It can be configured as follows:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="elf.config.js"',title:'"elf.config.js"'},"module.exports = {\n  cli: {\n    fuzzypath: {\n      rootPath: // defaults to process.cwd()\n      excludePath(path) {\n        // defaults to path.includes('node_modules')\n      }\n      excludeFilter(path) {\n        // defaults to path.includes('.');\n      }\n    }\n  }\n}\n")))}d.isMDXComponent=!0}}]);