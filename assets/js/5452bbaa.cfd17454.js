"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[114],{858:(e,t,a)=>{a.d(t,{S:()=>l});var n=a(7294),i=a(9979),o=a(2949);const s={core:{"@ngneat/elf":"latest"},entities:{"@ngneat/elf-entities":"latest"},requests:{"@ngneat/elf-requests":"latest"},pagination:{"@ngneat/elf-pagination":"latest"},devtools:{"@ngneat/elf-devtools":"latest"},persist:{"@ngneat/elf-persist-state":"latest"},history:{"@ngneat/elf-state-history":"latest"},rxjs:{rxjs:"latest"},immer:{immer:"latest"}};function l(e){let{src:t,packages:a=[]}=e;const l=(0,n.useRef)(),r=(0,n.useRef)(),p=["core","rxjs",...a],{colorMode:d}=(0,o.I)();return(0,n.useEffect)((()=>{const e=p.reduce(((e,t)=>(Object.assign(e,s[t]),e)),{});i.Z.embedProject(l.current,{description:"this is descrption",title:"Elf Core",files:{"index.html":"","index.ts":t},template:"typescript",dependencies:e,settings:{compile:{clearConsole:!0}}},{hideDevTools:!1,devToolsHeight:99,theme:d,height:"500px"}).then((e=>{r.current=e.editor}))}),[]),(0,n.useEffect)((()=>{r.current&&r.current.setTheme(d)}),[d]),n.createElement("section",{style:{height:"500px"}},n.createElement("div",{ref:l}))}},8695:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>d});var n=a(7462),i=(a(7294),a(3905));var o=a(858);const s={},l="Pagination",r={unversionedId:"features/pagination",id:"features/pagination",title:"Pagination",description:"In many cases - for example, when working with very large data-sets - we don't want to work with the full collection in memory.",source:"@site/docs/features/pagination.mdx",sourceDirName:"features",slug:"/features/pagination",permalink:"/elf/docs/features/pagination",draft:!1,editUrl:"https://github.com/ngneat/elf/docusaurus/edit/main/website/docs/features/pagination.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Requests Result",permalink:"/elf/docs/features/requests-result"},next:{title:"Persist State",permalink:"/elf/docs/features/persist-state"}},p={},d=[{value:"Queries",id:"queries",level:2},{value:"<code>selectCurrentPageEntities</code>",id:"selectcurrentpageentities",level:3},{value:"<code>selectCurrentPage</code>",id:"selectcurrentpage",level:3},{value:"<code>selectHasPage</code>",id:"selecthaspage",level:3},{value:"<code>hasPage</code>",id:"haspage",level:3},{value:"<code>selectPaginationData</code>",id:"selectpaginationdata",level:3},{value:"<code>getPaginationData</code>",id:"getpaginationdata",level:3},{value:"Mutations",id:"mutations",level:2},{value:"<code>setCurrentPage</code>",id:"setcurrentpage",level:3},{value:"<code>setPage</code>",id:"setpage",level:3},{value:"<code>updatePaginationData</code>",id:"updatepaginationdata",level:3},{value:"<code>deletePage</code>",id:"deletepage",level:3},{value:"<code>deleteAllPages</code>",id:"deleteallpages",level:3}],g={toc:d};function u(e){let{components:t,...a}=e;return(0,i.kt)("wrapper",(0,n.Z)({},g,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"pagination"},"Pagination"),(0,i.kt)("p",null,"In many cases - for example, when working with very large data-sets - we don't want to work with the full collection in memory.\nInstead, server-side pagination is used, where the server sends just a single page of data at a time."),(0,i.kt)("p",null,"Usually, we also want to cache pages that already have been fetched, in order to spare the need for an additional request."),(0,i.kt)("admonition",{type:"info"},(0,i.kt)("p",{parentName:"admonition"},"This feature requires ",(0,i.kt)("inlineCode",{parentName:"p"},"@ngneat/elf-entities"))),(0,i.kt)("p",null,"Using this feature, you can manage pagination by using the store. First, you need to install the package by using\nthe CLI command ",(0,i.kt)("inlineCode",{parentName:"p"},"elf-cli install")," and selecting the pagination package, or via npm:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @ngneat/elf-pagination\n")),(0,i.kt)("p",null,"To use this feature, provide the ",(0,i.kt)("inlineCode",{parentName:"p"},"withPagination")," props factory function in the ",(0,i.kt)("inlineCode",{parentName:"p"},"createStore")," call:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { createStore } from '@ngneat/elf';\nimport { withEntities } from '@ngneat/elf-entities';\nimport { withPagination } from '@ngneat/elf-pagination';\n\ninterface Todo {\n  id: number;\n  label: string;\n}\n\nconst todosStore = createStore(\n  { name: 'todos' },\n  withEntities<Todo>(),\n  withPagination()\n);\n")),(0,i.kt)("p",null,"Call ",(0,i.kt)("inlineCode",{parentName:"p"},"updatePaginationData()")," with a configuration object that determines the various pagination settings, and call ",(0,i.kt)("inlineCode",{parentName:"p"},"setPage()")," whenever you want to define the ",(0,i.kt)("inlineCode",{parentName:"p"},"ids")," that belong to a certain page number."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Note: pagination can start at index 0 or 1.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.repository"',title:'"todos.repository"'},"import { PaginationData } from '@ngneat/elf-pagination';\n\nexport function addTodos(response: PaginationData & { data: Todo[] }) {\n  const { data, ...paginationData } = response;\n\n  todosStore.update(\n    addEntities(todos),\n    updatePaginationData(paginationData),\n    setPage(\n      1,\n      data.map((c) => c.id)\n    )\n  );\n}\n")),(0,i.kt)("p",null,"In your server calls, you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"skipWhilePageExists")," operator, which enables you to skip server calls\nif the page exists in the store:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { skipWhilePageExists } from '@ngneat/elf-pagination';\n\nexport function getTodosPage(page: number) {\n  return http.get(todosUrl).pipe(\n    tap((todos) => addTodos(todos)),\n    skipWhilePageExists(page)\n  );\n}\n")),(0,i.kt)(o.S,{src:"import { createStore } from '@ngneat/elf';\nimport { addEntities, withEntities } from '@ngneat/elf-entities';\nimport {\n  setPage,\n  updatePaginationData,\n  withPagination,\n} from '@ngneat/elf-pagination';\n\ninterface Todo {\n  id: number;\n  label: string;\n}\n\nconst todosStore = createStore(\n  { name: 'todos' },\n  withEntities<Todo>(),\n  withPagination()\n);\n\nexport function addTodos(todos: Todo[]) {\n  todosStore.update(\n    addEntities(todos),\n    updatePaginationData({\n      currentPage: 1,\n      perPage: 10,\n      total: 96,\n      lastPage: 10,\n    }),\n    setPage(\n      1,\n      todos.map((c) => c.id)\n    )\n  );\n}\n\ntodosStore.subscribe(console.log);\n\naddTodos([{ id: 1, label: 'one' }]);\n",packages:["entities","pagination"],mdxType:"LiveDemo"}),(0,i.kt)("br",null),(0,i.kt)("p",null,"Additional queries and mutations available are:"),(0,i.kt)("h2",{id:"queries"},"Queries"),(0,i.kt)("h3",{id:"selectcurrentpageentities"},(0,i.kt)("inlineCode",{parentName:"h3"},"selectCurrentPageEntities")),(0,i.kt)("p",null,"Select the current page entities:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectCurrentPageEntities } from '@ngneat/elf-pagination';\n\ntodos$ = store.pipe(selectCurrentPageEntities());\n")),(0,i.kt)("h3",{id:"selectcurrentpage"},(0,i.kt)("inlineCode",{parentName:"h3"},"selectCurrentPage")),(0,i.kt)("p",null,"Select the current page number (by default it's page 1):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectCurrentPage } from '@ngneat/elf-pagination';\n\ncurrentPage$ = store.pipe(selectCurrentPage());\n")),(0,i.kt)("h3",{id:"selecthaspage"},(0,i.kt)("inlineCode",{parentName:"h3"},"selectHasPage")),(0,i.kt)("p",null,"Select whether the page exists:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectHasPage } from '@ngneat/elf-pagination';\n\nhasPage$ = store.pipe(selectHasPage(1));\n")),(0,i.kt)("h3",{id:"haspage"},(0,i.kt)("inlineCode",{parentName:"h3"},"hasPage")),(0,i.kt)("p",null,"Get whether the page exists:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { hasPage } from '@ngneat/elf-pagination';\n\nhasPage = store.query(hasPage(1));\n")),(0,i.kt)("h3",{id:"selectpaginationdata"},(0,i.kt)("inlineCode",{parentName:"h3"},"selectPaginationData")),(0,i.kt)("p",null,"Select the pagination data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectPaginationData } from '@ngneat/elf-pagination';\n\ndata$ = store.pipe(selectPaginationData());\n")),(0,i.kt)("h3",{id:"getpaginationdata"},(0,i.kt)("inlineCode",{parentName:"h3"},"getPaginationData")),(0,i.kt)("p",null,"Get pagination data:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { getPaginationData } from '@ngneat/elf-pagination';\n\ndata = store.query(getPaginationData());\n")),(0,i.kt)("h2",{id:"mutations"},"Mutations"),(0,i.kt)("h3",{id:"setcurrentpage"},(0,i.kt)("inlineCode",{parentName:"h3"},"setCurrentPage")),(0,i.kt)("p",null,"Set the current page:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { setCurrentPage } from '@ngneat/elf-pagination';\n\nstore.update(setCurrentPage(2));\n")),(0,i.kt)("h3",{id:"setpage"},(0,i.kt)("inlineCode",{parentName:"h3"},"setPage")),(0,i.kt)("p",null,"Set the ids belongs to a page:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { setPage } from '@ngneat/elf-pagination';\n\nstore.update(setPage(2, [id, id, id]));\n")),(0,i.kt)("h3",{id:"updatepaginationdata"},(0,i.kt)("inlineCode",{parentName:"h3"},"updatePaginationData")),(0,i.kt)("p",null,"Set the current page:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { updatePaginationData } from '@ngneat/elf-pagination';\n\nstore.update(\n  updatePaginationData({\n    currentPage: 1,\n    perPage: 10,\n    total: 96,\n    lastPage: 10,\n  })\n);\n")),(0,i.kt)("h3",{id:"deletepage"},(0,i.kt)("inlineCode",{parentName:"h3"},"deletePage")),(0,i.kt)("p",null,"Delete a page:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { deletePage } from '@ngneat/elf-pagination';\n\nstore.update(deletePage(2));\n")),(0,i.kt)("h3",{id:"deleteallpages"},(0,i.kt)("inlineCode",{parentName:"h3"},"deleteAllPages")),(0,i.kt)("p",null,"Delete all pages:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { deleteAllPages } from '@ngneat/elf-pagination';\n\nstore.update(deleteAllPages());\n")))}u.isMDXComponent=!0}}]);