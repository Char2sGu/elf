"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[98],{858:(e,t,n)=>{n.d(t,{S:()=>r});var i=n(7294),s=n(9979),o=n(2949);const a={core:{"@ngneat/elf":"latest"},entities:{"@ngneat/elf-entities":"latest"},requests:{"@ngneat/elf-requests":"latest"},pagination:{"@ngneat/elf-pagination":"latest"},devtools:{"@ngneat/elf-devtools":"latest"},persist:{"@ngneat/elf-persist-state":"latest"},history:{"@ngneat/elf-state-history":"latest"},rxjs:{rxjs:"latest"},immer:{immer:"latest"}};function r(e){let{src:t,packages:n=[]}=e;const r=(0,i.useRef)(),d=(0,i.useRef)(),l=["core","rxjs",...n],{colorMode:c}=(0,o.I)();return(0,i.useEffect)((()=>{const e=l.reduce(((e,t)=>(Object.assign(e,a[t]),e)),{});s.Z.embedProject(r.current,{description:"this is descrption",title:"Elf Core",files:{"index.html":"","index.ts":t},template:"typescript",dependencies:e,settings:{compile:{clearConsole:!0}}},{hideDevTools:!1,devToolsHeight:99,theme:c,height:"500px"}).then((e=>{d.current=e.editor}))}),[]),(0,i.useEffect)((()=>{d.current&&d.current.setTheme(c)}),[c]),i.createElement("section",{style:{height:"500px"}},i.createElement("div",{ref:r}))}},5685:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>a,metadata:()=>d,toc:()=>c});var i=n(7462),s=(n(7294),n(3905));var o=n(858);const a={},r="UI Entities",d={unversionedId:"features/entities-management/ui-entities",id:"features/entities-management/ui-entities",title:"UI Entities",description:"This feature allows the store to hold UI-specific entity data, for instance, whether the user has opened the card representing an entity.",source:"@site/docs/features/entities-management/ui-entities.mdx",sourceDirName:"features/entities-management",slug:"/features/entities-management/ui-entities",permalink:"/elf/docs/features/entities-management/ui-entities",draft:!1,editUrl:"https://github.com/ngneat/elf/docusaurus/edit/main/website/docs/features/entities-management/ui-entities.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Entities",permalink:"/elf/docs/features/entities-management/entities"},next:{title:"Active ID(s)",permalink:"/elf/docs/features/entities-management/active-ids"}},l={},c=[],p={toc:c};function m(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"ui-entities"},"UI Entities"),(0,s.kt)("p",null,"This feature allows the store to hold UI-specific entity data, for instance, whether the user has opened the card representing an entity.\nWhen used in conjunction with ",(0,s.kt)("inlineCode",{parentName:"p"},"withEntities")," this can be used to store additional UI data separately from the entities themselves."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { createStore } from '@ngneat/elf';\nimport { withEntities, withUIEntities } from '@ngneat/elf-entities';\n\ninterface TodoUI {\n  id: number;\n  open: boolean;\n}\ninterface Todo {\n  id: number;\n  name: string;\n}\n\nconst todosStore = createStore(\n  { name: 'todos' },\n  withEntities<Todo>(),\n  withUIEntities<TodoUI>()\n);\n")),(0,s.kt)("p",null,"The usage is similar to that of ",(0,s.kt)("inlineCode",{parentName:"p"},"entities")," - you can use the same selectors and mutations, with the addition of passing the\n",(0,s.kt)("inlineCode",{parentName:"p"},"UIEntitiesRef")," ref in the method's ",(0,s.kt)("inlineCode",{parentName:"p"},"options")," parameter, e.g.:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { addEntities, UIEntitiesRef, selectEntity } from '@ngneat/elf-entities';\n\ntodosStore.update(\n  addEntities({ id: 1, name: 'foo' }),\n  addEntities({ id: 1, open: true }, { ref: UIEntitiesRef })\n);\n\nuiEntity$ = todosStore.pipe(selectEntity(1, { ref: UIEntitiesRef }));\n")),(0,s.kt)("p",null,"We can use the ",(0,s.kt)("inlineCode",{parentName:"p"},"unionEntities()")," or ",(0,s.kt)("inlineCode",{parentName:"p"},"unionEntitiesAsMap()")," operator to get a combination of the entities and their corresponding ",(0,s.kt)("inlineCode",{parentName:"p"},"UIEntities"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import {\n  unionEntities,\n  selectAllEntities,\n  selectEntities,\n  UIEntitiesRef,\n} from '@ngneat/elf-entities';\n\ntodos$ = todosStore\n  .combine({\n    entities: todosStore.pipe(selectAllEntities()),\n    UIEntities: todosStore.pipe(selectEntities({ ref: UIEntitiesRef })),\n  })\n  .pipe(unionEntities());\n")),(0,s.kt)("p",null,"You can also pass a different ",(0,s.kt)("inlineCode",{parentName:"p"},"idKey"),": ",(0,s.kt)("inlineCode",{parentName:"p"},"unionEntities('_id')"),"."),(0,s.kt)(o.S,{src:"import { createStore } from '@ngneat/elf';\nimport {\n  addEntities,\n  selectAllEntities,\n  selectEntities,\n  selectEntity,\n  UIEntitiesRef,\n  unionEntities,\n  withEntities,\n  withUIEntities,\n} from '@ngneat/elf-entities';\n\ninterface TodoUI {\n  id: number;\n  open: boolean;\n}\ninterface Todo {\n  id: number;\n  name: string;\n}\n\nconst todosStore = createStore(\n  { name: 'todos' },\n  withEntities<Todo>(),\n  withUIEntities<TodoUI>()\n);\n\ntodosStore.update(\n  addEntities({ id: 1, name: 'foo' }),\n  addEntities({ id: 1, open: true }, { ref: UIEntitiesRef })\n);\n\ntodosStore.pipe(selectEntity(1, { ref: UIEntitiesRef })).subscribe((todo) => {\n  console.log(todo);\n});\n\ntodosStore\n  .combine({\n    entities: todosStore.pipe(selectAllEntities()),\n    UIEntities: todosStore.pipe(selectEntities({ ref: UIEntitiesRef })),\n  })\n  .pipe(unionEntities())\n  .subscribe(console.log);\n",packages:["entities"],mdxType:"LiveDemo"}))}m.isMDXComponent=!0}}]);