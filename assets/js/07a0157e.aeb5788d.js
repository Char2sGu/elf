"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[357],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var s=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},o=Object.keys(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=s.createContext({}),l=function(e){var t=s.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=l(e.components);return s.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},p=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,u=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),p=l(n),f=r,m=p["".concat(u,".").concat(f)]||p[f]||c[f]||o;return n?s.createElement(m,i(i({ref:t},d),{},{components:n})):s.createElement(m,i({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var a={};for(var u in t)hasOwnProperty.call(t,u)&&(a[u]=t[u]);a.originalType=e,a.mdxType="string"==typeof e?e:r,i[1]=a;for(var l=2;l<o;l++)i[l]=n[l];return s.createElement.apply(null,i)}return s.createElement.apply(null,n)}p.displayName="MDXCreateElement"},2142:(e,t,n)=>{n.d(t,{S:()=>R});var s=n(7294),r=["angular-cli","create-react-app","html","javascript","node","polymer","typescript","vue"],o={clickToLoad:function(e){return a("ctl",e)},devToolsHeight:function(e){return u("devToolsHeight",e)},forceEmbedLayout:function(e){return a("embed",e)},hideDevTools:function(e){return a("hideDevTools",e)},hideExplorer:function(e){return a("hideExplorer",e)},hideNavigation:function(e){return a("hideNavigation",e)},showSidebar:function(e){return function(e,t){return"boolean"==typeof t?"showSidebar="+(t?"1":"0"):""}(0,e)},openFile:function(e){return function(e,t){return(Array.isArray(t)?t:[t]).filter((function(e){return"string"==typeof e&&""!==e.trim()})).map((function(e){return"file="+encodeURIComponent(e.trim())}))}(0,e).join("&")},terminalHeight:function(e){return u("terminalHeight",e)},theme:function(e){return l("theme",["light","dark"],e)},view:function(e){return l("view",["preview","editor"],e)}};function i(e){void 0===e&&(e={});var t=Object.entries(e).map((function(e){var t=e[0],n=e[1];return null!=n&&o.hasOwnProperty(t)?o[t](n):""})).filter(Boolean);return t.length?"?"+t.join("&"):""}function a(e,t){return!0===t?e+"=1":""}function u(e,t){return"number"==typeof t&&t>=0&&t<=100?e+"="+Math.round(t):""}function l(e,t,n){return"string"==typeof n&&t.includes(n)?e+"="+n:""}function d(){return Math.random().toString(36).slice(2,6)+Math.random().toString(36).slice(2,6)}function c(e,t){var n={forceEmbedLayout:!0};return t&&"object"==typeof t&&Object.assign(n,t),""+p(n)+e+i(n)}function p(e){return void 0===e&&(e={}),"string"==typeof e.origin?e.origin:"https://stackblitz.com"}function f(e,t,n){if(!t||!e||!e.parentNode)throw new Error("Invalid Element");e.id&&(t.id=e.id),e.className&&(t.className=e.className),function(e,t){t&&"object"==typeof t&&(Object.hasOwnProperty.call(t,"height")&&(e.height=""+t.height),Object.hasOwnProperty.call(t,"width")&&(e.width=""+t.width)),e.height||(e.height="300"),e.width||e.setAttribute("style","width:100%;")}(t,n),e.parentNode.replaceChild(t,e)}function m(e){if("string"==typeof e){var t=document.getElementById(e);if(!t)throw new Error("Could not find element with id '"+e+"'");return t}if(e instanceof HTMLElement)return e;throw new Error("Invalid element: "+e)}function h(){return h=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var s in n)Object.prototype.hasOwnProperty.call(n,s)&&(e[s]=n[s])}return e},h.apply(this,arguments)}var g=function(){function e(e){this.port=void 0,this.pending={},this.port=e,this.port.onmessage=this.messageListener.bind(this)}var t=e.prototype;return t.request=function(e){var t=this,n=e.type,s=e.payload,r=d();return new Promise((function(e,o){t.pending[r]={resolve:e,reject:o},t.port.postMessage({type:n,payload:h({},s,{__reqid:r})})}))},t.messageListener=function(e){var t;if("string"==typeof(null==(t=e.data.payload)?void 0:t.__reqid)){var n=e.data,s=n.type,r=n.payload,o=r.__reqid,i=r.__error;this.pending[o]&&(r.__success?this.pending[o].resolve(function(e){var t=h({},e);return delete t.__reqid,delete t.__success,delete t.__error,Object.keys(t).length?t:null}(r)):this.pending[o].reject(i?s+": "+i:s),delete this.pending[o])}},e}(),y=function(){function e(e,t){var n=this;this._rdc=void 0,this.editor={openFile:function(e){return n._rdc.request({type:"SDK_OPEN_FILE",payload:{path:e}})},setCurrentFile:function(e){return n._rdc.request({type:"SDK_SET_CURRENT_FILE",payload:{path:e}})},setTheme:function(e){return n._rdc.request({type:"SDK_SET_UI_THEME",payload:{theme:e}})},setView:function(e){return n._rdc.request({type:"SDK_SET_UI_VIEW",payload:{view:e}})},showSidebar:function(e){return void 0===e&&(e=!0),n._rdc.request({type:"SDK_TOGGLE_SIDEBAR",payload:{visible:e}})}},this.preview={origin:"",getUrl:function(){return n._rdc.request({type:"SDK_GET_PREVIEW_URL",payload:{}}).then((function(e){var t;return null!=(t=null==e?void 0:e.url)?t:null}))},setUrl:function(e){if(void 0===e&&(e="/"),"string"!=typeof e||!e.startsWith("/"))throw new Error("Invalid argument: expected a path starting with '/', got '"+e+"'");return n._rdc.request({type:"SDK_SET_PREVIEW_URL",payload:{path:e}})}},this._rdc=new g(e),Object.defineProperty(this.preview,"origin",{value:"string"==typeof t.previewOrigin?t.previewOrigin:null,writable:!1})}var t=e.prototype;return t.applyFsDiff=function(e){var t=function(e){return null!==e&&"object"==typeof e};if(!t(e)||!t(e.create))throw new Error("Invalid diff object: expected diff.create to be an object.");if(!Array.isArray(e.destroy))throw new Error("Invalid diff object: expected diff.create to be an array.");return this._rdc.request({type:"SDK_APPLY_FS_DIFF",payload:e})},t.getDependencies=function(){return this._rdc.request({type:"SDK_GET_DEPS_SNAPSHOT",payload:{}})},t.getFsSnapshot=function(){return this._rdc.request({type:"SDK_GET_FS_SNAPSHOT",payload:{}})},e}(),v=[],q=function(e){var t=this;this.element=void 0,this.id=void 0,this.pending=void 0,this.vm=void 0,this.id=d(),this.element=e,this.pending=new Promise((function(e,n){var s=function(n){var s=n.data;"SDK_INIT_SUCCESS"===(null==s?void 0:s.action)&&s.id===t.id&&(t.vm=new y(n.ports[0],s.payload),e(t.vm),o())},r=function(){var e;null==(e=t.element.contentWindow)||e.postMessage({action:"SDK_INIT",id:t.id},"*")};function o(){window.clearInterval(a),window.removeEventListener("message",s)}window.addEventListener("message",s),r();var i=0,a=window.setInterval((function(){if(t.vm)o();else{if(i>=20)return o(),n("Timeout: Unable to establish a connection with the StackBlitz VM"),void v.forEach((function(e,n){e.id===t.id&&v.splice(n,1)}));i++,r()}}),500)})),v.push(this)};function S(e,t){var n=document.createElement("input");return n.type="hidden",n.name=e,n.value=t,n}function k(e){if(!r.includes(e.template)){var t=r.map((function(e){return"'"+e+"'"})).join(", ");console.warn("Unsupported project.template: must be one of "+t)}var n="node"===e.template,s=document.createElement("form");return s.method="POST",s.setAttribute("style","display:none!important;"),s.appendChild(S("project[title]",e.title)),s.appendChild(S("project[description]",e.description)),s.appendChild(S("project[template]",e.template)),e.dependencies&&(n?console.warn("Invalid project.dependencies: dependencies must be provided as a 'package.json' file when using the 'node' template."):s.appendChild(S("project[dependencies]",JSON.stringify(e.dependencies)))),e.settings&&s.appendChild(S("project[settings]",JSON.stringify(e.settings))),Object.keys(e.files).forEach((function(t){"string"==typeof e.files[t]&&s.appendChild(S("project[files]["+t+"]",e.files[t]))})),s}function w(e){var t,n,s,r;return null!=e&&e.contentWindow?(null!=(r=(n=e)instanceof Element?"element":"id",t=null!=(s=v.find((function(e){return e[r]===n})))?s:null)?t:new q(e)).pending:Promise.reject("Provided element is not an iframe.")}var b=function(e,t,n){var s,r=m(e),o=function(e,t){var n=k(e);return n.action=c("/run",t),n.id="sb","<html><head><title></title></head><body>"+n.outerHTML+"<script>document.getElementById('"+n.id+"').submit();<\/script></body></html>"}(t,n),i=document.createElement("iframe");return f(r,i,n),null==(s=i.contentDocument)||s.write(o),w(i)},E=n(2949);const T={core:{"@ngneat/elf":"latest"},entities:{"@ngneat/elf-entities":"latest"},requests:{"@ngneat/elf-requests":"latest"},pagination:{"@ngneat/elf-pagination":"latest"},devtools:{"@ngneat/elf-devtools":"latest"},persist:{"@ngneat/elf-persist-state":"latest"},history:{"@ngneat/elf-state-history":"latest"},rxjs:{rxjs:"latest"},immer:{immer:"latest"}};function R(e){let{src:t,packages:n=[]}=e;const r=(0,s.useRef)(),o=(0,s.useRef)(),i=["core","rxjs",...n],{colorMode:a}=(0,E.I)();return(0,s.useEffect)((()=>{const e=i.reduce(((e,t)=>(Object.assign(e,T[t]),e)),{});b(r.current,{description:"this is descrption",title:"Elf Core",files:{"index.html":"","index.ts":t},template:"typescript",dependencies:e,settings:{compile:{clearConsole:!0}}},{hideDevTools:!1,devToolsHeight:99,theme:a,height:"500px"}).then((e=>{o.current=e.editor}))}),[]),(0,s.useEffect)((()=>{o.current&&o.current.setTheme(a)}),[a]),s.createElement("section",{style:{height:"500px"}},s.createElement("div",{ref:r}))}},920:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>u,toc:()=>d});var s=n(7462),r=(n(7294),n(3905));var o=n(2142);const i={},a="Status",u={unversionedId:"features/requests/requests-status",id:"features/requests/requests-status",title:"Status",description:"Using this feature, you can manage the status of API calls in your store. First, you need to install the package by",source:"@site/docs/features/requests/requests-status.mdx",sourceDirName:"features/requests",slug:"/features/requests/requests-status",permalink:"/elf/docs/features/requests/requests-status",draft:!1,editUrl:"https://github.com/ngneat/elf/docusaurus/edit/main/website/docs/features/requests/requests-status.mdx",tags:[],version:"current",frontMatter:{}},l={},d=[{value:"Queries",id:"queries",level:2},{value:"<code>selectRequestStatus</code>",id:"selectrequeststatus",level:3},{value:"<code>getRequestStatus</code>",id:"getrequeststatus",level:3},{value:"<code>selectIsRequestPending</code>",id:"selectisrequestpending",level:3},{value:"Mutations",id:"mutations",level:2},{value:"<code>updateRequestStatus</code>",id:"updaterequeststatus",level:3},{value:"<code>updateRequestsStatus</code>",id:"updaterequestsstatus",level:3},{value:"<code>clearRequestsStatus</code>",id:"clearrequestsstatus",level:3}],c={toc:d};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,s.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"status"},"Status"),(0,r.kt)("p",null,"Using this feature, you can manage the status of API calls in your store. First, you need to install the package by\nusing the CLI command ",(0,r.kt)("inlineCode",{parentName:"p"},"elf-cli install")," and selecting the requests package, or via npm:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @ngneat/elf-requests\n")),(0,r.kt)("p",null,"To use this feature, provide the ",(0,r.kt)("inlineCode",{parentName:"p"},"withRequestsStatus")," props factory function in the ",(0,r.kt)("inlineCode",{parentName:"p"},"createStore")," call:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.repository"',title:'"todos.repository"'},"import { createStore } from '@ngneat/elf';\nimport { withEntities } from '@ngneat/elf-entities';\nimport {\n  withRequestsStatus,\n  createRequestsStatusOperator,\n} from '@ngneat/elf-requests';\n\ninterface Todo {\n  id: number;\n  label: string;\n}\n\nconst todosStore = createStore(\n  { name: 'todos' },\n  withEntities<Todo>(),\n  // You can pass the keys type\n  // highlight-next-line\n  withRequestsStatus<`todos` | `todo-${string}`>()\n);\n")),(0,r.kt)("p",null,"Now we can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"createRequestsStatusOperator")," function that takes a store and returns a custom operator. That operator takes the request key and sets its initial status to ",(0,r.kt)("inlineCode",{parentName:"p"},"pending"),". It also updates it to ",(0,r.kt)("inlineCode",{parentName:"p"},"error")," when it fails."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.repository"',title:'"todos.repository"'},"import {\n  withRequestsStatus,\n  createRequestsStatusOperator,\n} from '@ngneat/elf-requests';\n\n// ...\nconst todosStore = createStore({ name: 'todos', withEntities<Todo>(); });\n// highlight-next-line\nexport const trackTodosRequestsStatus =\n  createRequestsStatusOperator(todosStore);\n")),(0,r.kt)("p",null,"And use it with our ",(0,r.kt)("inlineCode",{parentName:"p"},"async")," source:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.service.ts"',title:'"todos.service.ts"'},"import { setTodos, trackTodosRequestsStatus } from './todos.repository';\n\nexport function fetchTodos() {\n  return http.get(todosUrl).pipe(\n    tap(setTodos),\n    // highlight-next-line\n    trackTodosRequestsStatus('todos')\n  );\n}\n")),(0,r.kt)("p",null,"Upon successful completion, the ",(0,r.kt)("inlineCode",{parentName:"p"},"success")," status must be manually set as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.repository.ts"',title:'"todos.repository.ts"'},"import { updateRequestStatus } from '@ngneat/elf-requests';\nimport { setTodos } from './todos.repository';\n\nexport function setTodos(todos: Todo[]) {\n  store.update(\n    addEntities(todos),\n    // highlight-next-line\n    updateRequestStatus('todos', 'success')\n  );\n}\n")),(0,r.kt)("p",null,"You need to set it manually to avoid a ",(0,r.kt)("strong",{parentName:"p"},"redundant"),' update and have the option to define what a "successful" response is.'),(0,r.kt)("p",null,"The default ",(0,r.kt)("inlineCode",{parentName:"p"},"status")," of any request is ",(0,r.kt)("inlineCode",{parentName:"p"},"idle"),". You can use the ",(0,r.kt)("inlineCode",{parentName:"p"},"initializeAsPending")," function to initialize a request as ",(0,r.kt)("inlineCode",{parentName:"p"},"pending"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { createStore } from '@ngneat/elf';\nimport { withEntities } from '@ngneat/elf-entities';\nimport { withRequestsStatus, initializeAsPending } from '@ngneat/elf-requests';\n\nconst todosStore = createStore(\n  { name: 'todos' },\n  withEntities<Todo>(),\n  withRequestsStatus(\n    // highlight-next-line\n    initializeAsPending('todos')\n  )\n);\n")),(0,r.kt)(o.S,{src:"import { createStore } from '@ngneat/elf';\nimport { setEntities, withEntities } from '@ngneat/elf-entities';\nimport {\n  createRequestsStatusOperator,\n  selectRequestStatus,\n  updateRequestStatus,\n  withRequestsStatus,\n} from '@ngneat/elf-requests';\nimport { fromFetch } from 'rxjs/fetch';\nimport { tap } from 'rxjs/operators';\n\ninterface Todo {\n  id: number;\n  label: string;\n}\n\nconst todosStore = createStore(\n  { name: 'todos' },\n  withEntities<Todo>(),\n  withRequestsStatus<'todos'>()\n);\n\nconst trackTodosRequestsStatus = createRequestsStatusOperator(todosStore);\n\ntodosStore.pipe(selectRequestStatus('todos')).subscribe((status) => {\n  console.log(status);\n});\n\nfunction setTodos(todos: Todo[]) {\n  todosStore.update(\n    setEntities(todos),\n    updateRequestStatus('todos', 'success')\n  );\n}\n\n// todos.service.ts\n\nfunction fecthTodos() {\n  return fromFetch<Todo[]>('https://jsonplaceholder.typicode.com/todos', {\n    selector: (response) => response.json(),\n  }).pipe(tap(setTodos), trackTodosRequestsStatus('todos'));\n}\n\nsetTimeout(() => {\n  fecthTodos().subscribe();\n}, 2000);\n",packages:["entities","requests"],mdxType:"LiveDemo"}),(0,r.kt)("br",null),"You can monitor and change the request status for your APIs using the following queries and mutations:",(0,r.kt)("h2",{id:"queries"},"Queries"),(0,r.kt)("h3",{id:"selectrequeststatus"},(0,r.kt)("inlineCode",{parentName:"h3"},"selectRequestStatus")),(0,r.kt)("p",null,"Select the status of the provided request key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectRequestStatus } from '@ngneat/elf-requests';\n\ntodosStatus$ = store.pipe(selectRequestStatus('todos'));\n\n// This will return success when either the `todos` key or the `todo-1` key is succeeded\ntodoStatus$ = store.pipe(selectRequestStatus('todo-1', { groupKey: 'todos' }));\n")),(0,r.kt)("h3",{id:"getrequeststatus"},(0,r.kt)("inlineCode",{parentName:"h3"},"getRequestStatus")),(0,r.kt)("p",null,"Get the status of the provided request key:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { getRequestStatus } from '@ngneat/elf-requests';\n\ntodosStatus = store.query(getRequestStatus('todos'));\n")),(0,r.kt)("h3",{id:"selectisrequestpending"},(0,r.kt)("inlineCode",{parentName:"h3"},"selectIsRequestPending")),(0,r.kt)("p",null,"Select whether the status of the provided request key is ",(0,r.kt)("inlineCode",{parentName:"p"},"pending"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectIsRequestPending } from '@ngneat/elf-requests';\n\npending$ = store.pipe(selectIsRequestPending('todos'));\n")),(0,r.kt)("h2",{id:"mutations"},"Mutations"),(0,r.kt)("h3",{id:"updaterequeststatus"},(0,r.kt)("inlineCode",{parentName:"h3"},"updateRequestStatus")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { updateRequestStatus } from '@ngneat/elf-requests';\n\nstore.update(updateRequestStatus('todos', 'idle'));\nstore.update(updateRequestStatus('todos', 'pending'));\nstore.update(updateRequestStatus('todos', 'success'));\nstore.update(updateRequestStatus('todos', 'error', error));\n")),(0,r.kt)("h3",{id:"updaterequestsstatus"},(0,r.kt)("inlineCode",{parentName:"h3"},"updateRequestsStatus")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { updateRequestsStatus } from '@ngneat/elf-requests';\n\nstore.update(\n  updateRequestsStatus({\n    keyOne: {\n      value: 'success',\n    },\n  })\n);\n\nstore.update(updateRequestsStatus(['keyOne', 'keyTwo'], 'success'));\nstore.update(updateRequestStatus(['keyOne', 'keyTwo'], 'error', error));\n")),(0,r.kt)("h3",{id:"clearrequestsstatus"},(0,r.kt)("inlineCode",{parentName:"h3"},"clearRequestsStatus")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { clearRequestsStatus } from '@ngneat/elf-requests';\n\nstore.update(clearRequestsStatus());\n")))}p.isMDXComponent=!0}}]);