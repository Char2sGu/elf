"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[215],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=i.createContext({}),d=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=d(e.components);return i.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=o,f=u["".concat(s,".").concat(m)]||u[m]||c[m]||a;return n?i.createElement(f,r(r({ref:t},p),{},{components:n})):i.createElement(f,r({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,r=new Array(a);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var d=2;d<a;d++)r[d]=n[d];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2142:(e,t,n)=>{n.d(t,{S:()=>_});var i=n(7294),o=["angular-cli","create-react-app","html","javascript","node","polymer","typescript","vue"],a={clickToLoad:function(e){return l("ctl",e)},devToolsHeight:function(e){return s("devToolsHeight",e)},forceEmbedLayout:function(e){return l("embed",e)},hideDevTools:function(e){return l("hideDevTools",e)},hideExplorer:function(e){return l("hideExplorer",e)},hideNavigation:function(e){return l("hideNavigation",e)},showSidebar:function(e){return function(e,t){return"boolean"==typeof t?"showSidebar="+(t?"1":"0"):""}(0,e)},openFile:function(e){return function(e,t){return(Array.isArray(t)?t:[t]).filter((function(e){return"string"==typeof e&&""!==e.trim()})).map((function(e){return"file="+encodeURIComponent(e.trim())}))}(0,e).join("&")},terminalHeight:function(e){return s("terminalHeight",e)},theme:function(e){return d("theme",["light","dark"],e)},view:function(e){return d("view",["preview","editor"],e)}};function r(e){void 0===e&&(e={});var t=Object.entries(e).map((function(e){var t=e[0],n=e[1];return null!=n&&a.hasOwnProperty(t)?a[t](n):""})).filter(Boolean);return t.length?"?"+t.join("&"):""}function l(e,t){return!0===t?e+"=1":""}function s(e,t){return"number"==typeof t&&t>=0&&t<=100?e+"="+Math.round(t):""}function d(e,t,n){return"string"==typeof n&&t.includes(n)?e+"="+n:""}function p(){return Math.random().toString(36).slice(2,6)+Math.random().toString(36).slice(2,6)}function c(e,t){var n={forceEmbedLayout:!0};return t&&"object"==typeof t&&Object.assign(n,t),""+u(n)+e+r(n)}function u(e){return void 0===e&&(e={}),"string"==typeof e.origin?e.origin:"https://stackblitz.com"}function m(e,t,n){if(!t||!e||!e.parentNode)throw new Error("Invalid Element");e.id&&(t.id=e.id),e.className&&(t.className=e.className),function(e,t){t&&"object"==typeof t&&(Object.hasOwnProperty.call(t,"height")&&(e.height=""+t.height),Object.hasOwnProperty.call(t,"width")&&(e.width=""+t.width)),e.height||(e.height="300"),e.width||e.setAttribute("style","width:100%;")}(t,n),e.parentNode.replaceChild(t,e)}function f(e){if("string"==typeof e){var t=document.getElementById(e);if(!t)throw new Error("Could not find element with id '"+e+"'");return t}if(e instanceof HTMLElement)return e;throw new Error("Invalid element: "+e)}function y(){return y=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e},y.apply(this,arguments)}var h=function(){function e(e){this.port=void 0,this.pending={},this.port=e,this.port.onmessage=this.messageListener.bind(this)}var t=e.prototype;return t.request=function(e){var t=this,n=e.type,i=e.payload,o=p();return new Promise((function(e,a){t.pending[o]={resolve:e,reject:a},t.port.postMessage({type:n,payload:y({},i,{__reqid:o})})}))},t.messageListener=function(e){var t;if("string"==typeof(null==(t=e.data.payload)?void 0:t.__reqid)){var n=e.data,i=n.type,o=n.payload,a=o.__reqid,r=o.__error;this.pending[a]&&(o.__success?this.pending[a].resolve(function(e){var t=y({},e);return delete t.__reqid,delete t.__success,delete t.__error,Object.keys(t).length?t:null}(o)):this.pending[a].reject(r?i+": "+r:i),delete this.pending[a])}},e}(),g=function(){function e(e,t){var n=this;this._rdc=void 0,this.editor={openFile:function(e){return n._rdc.request({type:"SDK_OPEN_FILE",payload:{path:e}})},setCurrentFile:function(e){return n._rdc.request({type:"SDK_SET_CURRENT_FILE",payload:{path:e}})},setTheme:function(e){return n._rdc.request({type:"SDK_SET_UI_THEME",payload:{theme:e}})},setView:function(e){return n._rdc.request({type:"SDK_SET_UI_VIEW",payload:{view:e}})},showSidebar:function(e){return void 0===e&&(e=!0),n._rdc.request({type:"SDK_TOGGLE_SIDEBAR",payload:{visible:e}})}},this.preview={origin:"",getUrl:function(){return n._rdc.request({type:"SDK_GET_PREVIEW_URL",payload:{}}).then((function(e){var t;return null!=(t=null==e?void 0:e.url)?t:null}))},setUrl:function(e){if(void 0===e&&(e="/"),"string"!=typeof e||!e.startsWith("/"))throw new Error("Invalid argument: expected a path starting with '/', got '"+e+"'");return n._rdc.request({type:"SDK_SET_PREVIEW_URL",payload:{path:e}})}},this._rdc=new h(e),Object.defineProperty(this.preview,"origin",{value:"string"==typeof t.previewOrigin?t.previewOrigin:null,writable:!1})}var t=e.prototype;return t.applyFsDiff=function(e){var t=function(e){return null!==e&&"object"==typeof e};if(!t(e)||!t(e.create))throw new Error("Invalid diff object: expected diff.create to be an object.");if(!Array.isArray(e.destroy))throw new Error("Invalid diff object: expected diff.create to be an array.");return this._rdc.request({type:"SDK_APPLY_FS_DIFF",payload:e})},t.getDependencies=function(){return this._rdc.request({type:"SDK_GET_DEPS_SNAPSHOT",payload:{}})},t.getFsSnapshot=function(){return this._rdc.request({type:"SDK_GET_FS_SNAPSHOT",payload:{}})},e}(),k=[],E=function(e){var t=this;this.element=void 0,this.id=void 0,this.pending=void 0,this.vm=void 0,this.id=p(),this.element=e,this.pending=new Promise((function(e,n){var i=function(n){var i=n.data;"SDK_INIT_SUCCESS"===(null==i?void 0:i.action)&&i.id===t.id&&(t.vm=new g(n.ports[0],i.payload),e(t.vm),a())},o=function(){var e;null==(e=t.element.contentWindow)||e.postMessage({action:"SDK_INIT",id:t.id},"*")};function a(){window.clearInterval(l),window.removeEventListener("message",i)}window.addEventListener("message",i),o();var r=0,l=window.setInterval((function(){if(t.vm)a();else{if(r>=20)return a(),n("Timeout: Unable to establish a connection with the StackBlitz VM"),void k.forEach((function(e,n){e.id===t.id&&k.splice(n,1)}));r++,o()}}),500)})),k.push(this)};function v(e,t){var n=document.createElement("input");return n.type="hidden",n.name=e,n.value=t,n}function N(e){if(!o.includes(e.template)){var t=o.map((function(e){return"'"+e+"'"})).join(", ");console.warn("Unsupported project.template: must be one of "+t)}var n="node"===e.template,i=document.createElement("form");return i.method="POST",i.setAttribute("style","display:none!important;"),i.appendChild(v("project[title]",e.title)),i.appendChild(v("project[description]",e.description)),i.appendChild(v("project[template]",e.template)),e.dependencies&&(n?console.warn("Invalid project.dependencies: dependencies must be provided as a 'package.json' file when using the 'node' template."):i.appendChild(v("project[dependencies]",JSON.stringify(e.dependencies)))),e.settings&&i.appendChild(v("project[settings]",JSON.stringify(e.settings))),Object.keys(e.files).forEach((function(t){"string"==typeof e.files[t]&&i.appendChild(v("project[files]["+t+"]",e.files[t]))})),i}function S(e){var t,n,i,o;return null!=e&&e.contentWindow?(null!=(o=(n=e)instanceof Element?"element":"id",t=null!=(i=k.find((function(e){return e[o]===n})))?i:null)?t:new E(e)).pending:Promise.reject("Provided element is not an iframe.")}var b=function(e,t,n){var i,o=f(e),a=function(e,t){var n=N(e);return n.action=c("/run",t),n.id="sb","<html><head><title></title></head><body>"+n.outerHTML+"<script>document.getElementById('"+n.id+"').submit();<\/script></body></html>"}(t,n),r=document.createElement("iframe");return m(o,r,n),null==(i=r.contentDocument)||i.write(a),S(r)},w=n(2949);const C={core:{"@ngneat/elf":"latest"},entities:{"@ngneat/elf-entities":"latest"},requests:{"@ngneat/elf-requests":"latest"},pagination:{"@ngneat/elf-pagination":"latest"},devtools:{"@ngneat/elf-devtools":"latest"},persist:{"@ngneat/elf-persist-state":"latest"},history:{"@ngneat/elf-state-history":"latest"},rxjs:{rxjs:"latest"},immer:{immer:"latest"}};function _(e){let{src:t,packages:n=[]}=e;const o=(0,i.useRef)(),a=(0,i.useRef)(),r=["core","rxjs",...n],{colorMode:l}=(0,w.I)();return(0,i.useEffect)((()=>{const e=r.reduce(((e,t)=>(Object.assign(e,C[t]),e)),{});b(o.current,{description:"this is descrption",title:"Elf Core",files:{"index.html":"","index.ts":t},template:"typescript",dependencies:e,settings:{compile:{clearConsole:!0}}},{hideDevTools:!1,devToolsHeight:99,theme:l,height:"500px"}).then((e=>{a.current=e.editor}))}),[]),(0,i.useEffect)((()=>{a.current&&a.current.setTheme(l)}),[l]),i.createElement("section",{style:{height:"500px"}},i.createElement("div",{ref:o}))}},462:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var i=n(7462),o=(n(7294),n(3905));var a=n(2142);const r={},l="Entities",s={unversionedId:"features/entities-management/entities",id:"features/entities-management/entities",title:"Entities",description:"This feature enables the store to act as an entities store. You can think of an entities state as a table in a database,",source:"@site/docs/features/entities-management/entities.mdx",sourceDirName:"features/entities-management",slug:"/features/entities-management/entities",permalink:"/elf/docs/features/entities-management/entities",draft:!1,editUrl:"https://github.com/ngneat/elf/docusaurus/edit/main/website/docs/features/entities-management/entities.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"The Facade Pattern",permalink:"/elf/docs/facade"},next:{title:"UI Entities",permalink:"/elf/docs/features/entities-management/ui-entities"}},d={},p=[{value:"Queries",id:"queries",level:2},{value:"<code>selectAllEntities</code>",id:"selectallentities",level:3},{value:"<code>selectAllEntitiesApply</code>",id:"selectallentitiesapply",level:3},{value:"<code>getAllEntitiesApply</code>",id:"getallentitiesapply",level:3},{value:"<code>selectEntities</code>",id:"selectentities",level:3},{value:"<code>selectEntity</code>",id:"selectentity",level:3},{value:"<code>selectEntityByPredicate</code>",id:"selectentitybypredicate",level:3},{value:"<code>selectMany</code>",id:"selectmany",level:3},{value:"<code>selectManyByPredicate</code>",id:"selectmanybypredicate",level:3},{value:"<code>selectFirst</code>",id:"selectfirst",level:3},{value:"<code>selectLast</code>",id:"selectlast",level:3},{value:"<code>selectEntitiesCount</code>",id:"selectentitiescount",level:3},{value:"<code>selectEntitiesCountByPredicate</code>",id:"selectentitiescountbypredicate",level:3},{value:"<code>getAllEntities</code>",id:"getallentities",level:3},{value:"<code>getEntitiesIds</code>",id:"getentitiesids",level:3},{value:"<code>getEntity</code>",id:"getentity",level:3},{value:"<code>hasEntity</code>",id:"hasentity",level:3},{value:"<code>getEntitiesCount</code>",id:"getentitiescount",level:3},{value:"<code>getEntitiesCountByPredicate</code>",id:"getentitiescountbypredicate",level:3},{value:"Mutations",id:"mutations",level:2},{value:"<code>setEntities</code>",id:"setentities",level:3},{value:"<code>setEntitiesMap</code>",id:"setentitiesmap",level:3},{value:"<code>addEntities</code>",id:"addentities",level:3},{value:"<code>addEntitiesFifo</code>",id:"addentitiesfifo",level:3},{value:"<code>updateEntities</code>",id:"updateentities",level:3},{value:"<code>updateEntitiesByPredicate</code>",id:"updateentitiesbypredicate",level:3},{value:"<code>updateAllEntities</code>",id:"updateallentities",level:3},{value:"<code>upsertEntities</code>",id:"upsertentities",level:3},{value:"<code>upsertEntitiesById</code>",id:"upsertentitiesbyid",level:3},{value:"<code>updateEntitiesIds</code>",id:"updateentitiesids",level:3},{value:"<code>deleteEntities</code>",id:"deleteentities",level:3},{value:"<code>deleteEntitiesByPredicate</code>",id:"deleteentitiesbypredicate",level:3},{value:"<code>deleteAllEntities</code>",id:"deleteallentities",level:3},{value:"<code>moveEntity</code>",id:"moveentity",level:3},{value:"idKey",id:"idkey",level:2},{value:"initialValue",id:"initialvalue",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"entities"},"Entities"),(0,o.kt)("p",null,"This feature enables the store to act as an entities store. You can think of an ",(0,o.kt)("inlineCode",{parentName:"p"},"entities")," state as a table in a database,\nwhere each table represents a flat collection of similar entities. Elf's entities state simplifies the process, giving you\neverything you need to manage it."),(0,o.kt)("p",null,"First, you need to install the package by using the CLI command ",(0,o.kt)("inlineCode",{parentName:"p"},"elf-cli install")," and selecting the entities package,\nor via npm:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @ngneat/elf-entities\n")),(0,o.kt)("p",null,"To use this feature, provide the ",(0,o.kt)("inlineCode",{parentName:"p"},"withEntities")," props factory function in the ",(0,o.kt)("inlineCode",{parentName:"p"},"createStore")," call:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createStore } from '@ngneat/elf';\nimport { withEntities } from '@ngneat/elf-entities';\n\ninterface Todo {\n  id: number;\n  label: string;\n}\n\nconst todosStore = createStore({ name: 'todos' }, withEntities<Todo>());\n")),(0,o.kt)(a.S,{src:"import { createStore } from '@ngneat/elf';\nimport {\n  selectAllEntities,\n  setEntities,\n  withEntities,\n} from '@ngneat/elf-entities';\n\ninterface Todo {\n  id: number;\n  label: string;\n}\n\nconst todosStore = createStore({ name: 'todos' }, withEntities<Todo>());\n\ntodosStore.pipe(selectAllEntities()).subscribe((todos) => {\n  console.log(todos);\n});\n\ntodosStore.update(\n  setEntities([\n    { id: 1, label: 'one ' },\n    { id: 2, label: 'two' },\n  ])\n);\n",packages:["entities"],mdxType:"LiveDemo"}),(0,o.kt)("br",null),(0,o.kt)("p",null,"This will allow you to use the following ready-made mutations and queries:"),(0,o.kt)("h2",{id:"queries"},"Queries"),(0,o.kt)("h3",{id:"selectallentities"},(0,o.kt)("inlineCode",{parentName:"h3"},"selectAllEntities")),(0,o.kt)("p",null,"Select the entire store's entity collection:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectAllEntities } from '@ngneat/elf-entities';\n\nconst todos$ = todosStore.pipe(selectAllEntities());\n")),(0,o.kt)("h3",{id:"selectallentitiesapply"},(0,o.kt)("inlineCode",{parentName:"h3"},"selectAllEntitiesApply")),(0,o.kt)("p",null,"Select the entire store's entity collection, and apply a ",(0,o.kt)("inlineCode",{parentName:"p"},"filter/map"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectAllEntitiesApply } from '@ngneat/elf-entities';\n\nconst titles$ = todosStore.pipe(\n  selectAllEntitiesApply({\n    mapEntity: (e) => e.title,\n    filterEntity: (e) => e.completed,\n  })\n);\n")),(0,o.kt)("p",null,"In the above example, it'll first apply the ",(0,o.kt)("inlineCode",{parentName:"p"},"filter")," and then the ",(0,o.kt)("inlineCode",{parentName:"p"},"map")," function."),(0,o.kt)("h3",{id:"getallentitiesapply"},(0,o.kt)("inlineCode",{parentName:"h3"},"getAllEntitiesApply")),(0,o.kt)("p",null,"Get the entire store's entity collection, and apply a ",(0,o.kt)("inlineCode",{parentName:"p"},"filter/map"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { getAllEntitiesApply } from '@ngneat/elf-entities';\n\nconst titles = todosStore.query(\n  getAllEntitiesApply({\n    mapEntity: (e) => e.title,\n    filterEntity: (e) => e.completed,\n  })\n);\n")),(0,o.kt)("h3",{id:"selectentities"},(0,o.kt)("inlineCode",{parentName:"h3"},"selectEntities")),(0,o.kt)("p",null,"Select the entire store's entity collection as object:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectEntities } from '@ngneat/elf-entities';\n\nconst todos$ = todosStore.pipe(selectEntities());\n")),(0,o.kt)("h3",{id:"selectentity"},(0,o.kt)("inlineCode",{parentName:"h3"},"selectEntity")),(0,o.kt)("p",null,"Select an entity or a slice of an entity:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectEntity } from '@ngneat/elf-entities';\n\nconst todo$ = todosStore.pipe(selectEntity(id));\nconst title$ = todosStore.pipe(selectEntity(id, { pluck: 'title' }));\nconst title$ = todosStore.pipe(selectEntity(id, { pluck: (e) => e.title }));\n")),(0,o.kt)("h3",{id:"selectentitybypredicate"},(0,o.kt)("inlineCode",{parentName:"h3"},"selectEntityByPredicate")),(0,o.kt)("p",null,"Select an entity from the store by predicate:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectEntityByPredicate } from '@ngneat/elf-entities';\n\nconst todo$ = todosStore.pipe(\n  selectEntityByPredicate(({ completed }) => !completed)\n);\nconst title$ = todosStore.pipe(\n  selectEntityByPredicate(({ completed }) => !completed, {\n    pluck: 'title',\n    idKey: '_id',\n  })\n);\nconst title$ = todosStore.pipe(\n  selectEntityByPredicate(({ completed }) => !completed, {\n    pluck: (e) => e.title,\n    idKey: '_id',\n  })\n);\n")),(0,o.kt)("h3",{id:"selectmany"},(0,o.kt)("inlineCode",{parentName:"h3"},"selectMany")),(0,o.kt)("p",null,"Select multiple entities from the store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectMany } from '@ngneat/elf-entities';\n\nconst todos$ = todosStore.pipe(selectMany([id, id]));\nconst titles$ = todosStore.pipe(selectMany(id, { pluck: 'title' }));\nconst titles$ = todosStore.pipe(selectMany(id, { pluck: (e) => e.title }));\n")),(0,o.kt)("h3",{id:"selectmanybypredicate"},(0,o.kt)("inlineCode",{parentName:"h3"},"selectManyByPredicate")),(0,o.kt)("p",null,"Select multiple entities from the store by predicate:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectManyByPredicate } from '@ngneat/elf-entities';\n\nconst todos$ = todosStore.pipe(\n  selectManyByPredicate((entity) => entity.completed === false)\n);\nconst titles$ = todosStore.pipe(\n  selectManyByPredicate((entity) => entity.completed === false, {\n    pluck: 'title',\n  })\n);\nconst titles$ = todosStore.pipe(\n  selectManyByPredicate((entity) => entity.completed === false, {\n    pluck: (e) => e.title,\n  })\n);\n")),(0,o.kt)("h3",{id:"selectfirst"},(0,o.kt)("inlineCode",{parentName:"h3"},"selectFirst")),(0,o.kt)("p",null,"Select the first entity from the store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectFirst } from '@ngneat/elf-entities';\n\nconst first$ = todosStore.pipe(selectFirst());\n")),(0,o.kt)("h3",{id:"selectlast"},(0,o.kt)("inlineCode",{parentName:"h3"},"selectLast")),(0,o.kt)("p",null,"Select the last entity from the store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectLast } from '@ngneat/elf-entities';\n\nconst last$ = todosStore.pipe(selectLast());\n")),(0,o.kt)("h3",{id:"selectentitiescount"},(0,o.kt)("inlineCode",{parentName:"h3"},"selectEntitiesCount")),(0,o.kt)("p",null,"Select the store's entity collection size:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectEntitiesCount } from '@ngneat/elf-entities';\n\nconst count$ = todosStore.pipe(selectEntitiesCount());\n")),(0,o.kt)("h3",{id:"selectentitiescountbypredicate"},(0,o.kt)("inlineCode",{parentName:"h3"},"selectEntitiesCountByPredicate")),(0,o.kt)("p",null,"Select the store's entity collection size:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { selectEntitiesCountByPredicate } from '@ngneat/elf-entities';\n\nconst count$ = todosStore.pipe(\n  selectEntitiesCountByPredicate((entity) => entity.completed)\n);\n")),(0,o.kt)("h3",{id:"getallentities"},(0,o.kt)("inlineCode",{parentName:"h3"},"getAllEntities")),(0,o.kt)("p",null,"Get the entity collection:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { getAllEntities } from '@ngneat/elf-entities';\n\nconst todos = todosStore.query(getAllEntities());\n")),(0,o.kt)("h3",{id:"getentitiesids"},(0,o.kt)("inlineCode",{parentName:"h3"},"getEntitiesIds")),(0,o.kt)("p",null,"Get the entities ids:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { getEntitiesIds } from '@ngneat/elf-entities';\n\nconst todosIds = todosStore.query(getEntitiesIds());\n")),(0,o.kt)("h3",{id:"getentity"},(0,o.kt)("inlineCode",{parentName:"h3"},"getEntity")),(0,o.kt)("p",null,"Get an entity by id:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { getEntity } from '@ngneat/elf-entities';\n\nconst todo = todosStore.query(getEntity(id));\n")),(0,o.kt)("h3",{id:"hasentity"},(0,o.kt)("inlineCode",{parentName:"h3"},"hasEntity")),(0,o.kt)("p",null,"Returns whether an entity exists:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { hasEntity } from '@ngneat/elf-entities';\n\nif (todosStore.query(hasEntity(id))) {\n}\n")),(0,o.kt)("h3",{id:"getentitiescount"},(0,o.kt)("inlineCode",{parentName:"h3"},"getEntitiesCount")),(0,o.kt)("p",null,"Get the store's entity collection size:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { getEntitiesCount } from '@ngneat/elf-entities';\n\nconst count = todosStore.query(getEntitiesCount());\n")),(0,o.kt)("h3",{id:"getentitiescountbypredicate"},(0,o.kt)("inlineCode",{parentName:"h3"},"getEntitiesCountByPredicate")),(0,o.kt)("p",null,"Get the store's entity collection size:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { getEntitiesCountByPredicate } from '@ngneat/elf-entities';\n\nconst count = todosStore.query(\n  getEntitiesCountByPredicate((entity) => entity.completed)\n);\n")),(0,o.kt)("h2",{id:"mutations"},"Mutations"),(0,o.kt)("h3",{id:"setentities"},(0,o.kt)("inlineCode",{parentName:"h3"},"setEntities")),(0,o.kt)("p",null,"Replace current collection with the provided collection:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { setEntities } from '@ngneat/elf-entities';\n\ntodosStore.update(setEntities([todo, todo]));\n")),(0,o.kt)("h3",{id:"setentitiesmap"},(0,o.kt)("inlineCode",{parentName:"h3"},"setEntitiesMap")),(0,o.kt)("p",null,"Replace current collection with the provided map:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { setEntitiesMap } from '@ngneat/elf-entities';\n\nconst todos = {\n  1: {\n    id: 1,\n    task: 'Buy milk',\n  },\n  2: {\n    id: 2,\n    task: 'Fix car',\n  },\n};\ntodosStore.update(setEntitiesMap(todos));\n")),(0,o.kt)("h3",{id:"addentities"},(0,o.kt)("inlineCode",{parentName:"h3"},"addEntities")),(0,o.kt)("p",null,"Add an entity or entities to the store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { addEntities } from '@ngneat/elf-entities';\n\ntodosStore.update(addEntities(todo));\n\ntodosStore.update(addEntities([todo, todo]));\n\ntodosStore.update(addEntities([todo, todo], { prepend: true }));\n")),(0,o.kt)("h3",{id:"addentitiesfifo"},(0,o.kt)("inlineCode",{parentName:"h3"},"addEntitiesFifo")),(0,o.kt)("p",null,"Add an entity or entities to the store using fifo strategy:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { addEntitiesFifo } from '@ngneat/elf-entities';\n\ntodosStore.update(addEntitiesFifo([entity, entity]), { limit: 3 });\n")),(0,o.kt)("h3",{id:"updateentities"},(0,o.kt)("inlineCode",{parentName:"h3"},"updateEntities")),(0,o.kt)("p",null,"Update an entity or entities in the store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { updateEntities } from '@ngneat/elf-entities';\n\ntodosStore.update(updateEntities(id, { name }));\n\ntodosStore.update(updateEntities(id, (entity) => ({ ...entity, name })));\n\ntodosStore.update(updateEntities([id, id, id], { open: true }));\n")),(0,o.kt)("h3",{id:"updateentitiesbypredicate"},(0,o.kt)("inlineCode",{parentName:"h3"},"updateEntitiesByPredicate")),(0,o.kt)("p",null,"Update an entity or entities in the store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { updateEntitiesByPredicate } from '@ngneat/elf-entities';\n\ntodosStore.update(\n  updateEntitiesByPredicate(({ count }) => count === 0, { open: false })\n);\n\ntodosStore.update(\n  updateEntitiesByPredicate(({ count }) => count === 0),\n  (entity) => ({ ...entity, open: false })\n);\n")),(0,o.kt)("h3",{id:"updateallentities"},(0,o.kt)("inlineCode",{parentName:"h3"},"updateAllEntities")),(0,o.kt)("p",null,"Update all entities in the store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { updateAllEntities } from '@ngneat/elf-entities';\n\ntodosStore.update(updateAllEntities({ name: 'elf' }));\n\ntodosStore.update(\n  updateAllEntities((entity) => ({ ...entity, count: entity.count + 1 }))\n);\n")),(0,o.kt)("h3",{id:"upsertentities"},(0,o.kt)("inlineCode",{parentName:"h3"},"upsertEntities")),(0,o.kt)("p",null,"Add or update entities."),(0,o.kt)("p",null,"To identify entities in the store, every entity must have an ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," property. Any partial entities will be merged with the existing ones:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { upsertEntitiesBy } from '@ngneat/elf-entities';\n\ntodosStore.update(upsertEntities({ id: '1', happy: true }));\n\ntodosStore.update(\n  upsertEntities([\n    { id: '1', happy: true },\n    { id: '2', name: 'elf 2', happy: false },\n  ])\n);\n")),(0,o.kt)("h3",{id:"upsertentitiesbyid"},(0,o.kt)("inlineCode",{parentName:"h3"},"upsertEntitiesById")),(0,o.kt)("p",null,"Insert or update an entity. When the id isn't found, it creates a new entity; otherwise, it performs an update:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { upsertEntitiesById } from '@ngneat/elf-entities';\n\nconst creator = (id) => createTodo(id);\n\ntodosStore.update(\n  upsertEntitiesById(1, {\n    updater: { name: 'elf' },\n    creator,\n  })\n);\n\ntodosStore.update(\n  upsertEntitiesById([1, 2], {\n    updater: (entity) => ({ ...entity, count: entity.count + 1 }),\n    creator,\n  })\n);\n")),(0,o.kt)("p",null,"To perform a merge between a new entity and an ",(0,o.kt)("inlineCode",{parentName:"p"},"updater")," result, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"mergeUpdaterWithCreator")," option:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"todosStore.update(\n  upsertEntitiesById([1, 2], {\n    updater: (entity) => ({ ...entity, name }),\n    creator,\n    // highlight-next-line\n    mergeUpdaterWithCreator: true,\n  })\n);\n")),(0,o.kt)("p",null,"The above example will first create the entity using the ",(0,o.kt)("em",{parentName:"p"},"creator")," method, then pass the result to the ",(0,o.kt)("em",{parentName:"p"},"updater")," method, and merge both."),(0,o.kt)("h3",{id:"updateentitiesids"},(0,o.kt)("inlineCode",{parentName:"h3"},"updateEntitiesIds")),(0,o.kt)("p",null,"Update id of an entity or entities in the store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { updateEntitiesIds } from '@ngneat/elf-entities';\n\ntodosStore.update(updateEntitiesIds(oldId, newId));\n\ntodosStore.update(updateEntitiesIds([oldId1, oldId2], [newId1, newId2]));\n")),(0,o.kt)("p",null,'The most common use case for this is "optimistic updates":'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"function addTodo(todo: Todo) {\n  const tempId = generateRandomId();\n  todosStore.update(addEntities({ ...todo, id: tempId }));\n\n  addTodoToServer(todo).then(\n    (response) => {\n      todosStore.update(\n        updateEntitiesIds(tempId, response.id),\n        updateEntities(response.id, response)\n      );\n    },\n    (error) => {\n      todosStore.update(deleteEntities(tempId));\n      // handle error\n    }\n  );\n}\n")),(0,o.kt)("h3",{id:"deleteentities"},(0,o.kt)("inlineCode",{parentName:"h3"},"deleteEntities")),(0,o.kt)("p",null,"Delete an entity or entities from the store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { deleteEntities } from '@ngneat/elf-entities';\n\ntodosStore.update(deleteEntities(id));\ntodosStore.update(deleteEntities([id, id]));\n")),(0,o.kt)("h3",{id:"deleteentitiesbypredicate"},(0,o.kt)("inlineCode",{parentName:"h3"},"deleteEntitiesByPredicate")),(0,o.kt)("p",null,"Delete an entity or entities from the store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { deleteEntitiesByPredicate } from '@ngneat/elf-entities';\n\ntodosStore.update(deleteEntitiesByPredicate(({ completed }) => completed));\n")),(0,o.kt)("h3",{id:"deleteallentities"},(0,o.kt)("inlineCode",{parentName:"h3"},"deleteAllEntities")),(0,o.kt)("p",null,"Delete all entities from the store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { deleteAllEntities } from '@ngneat/elf-entities';\n\ntodosStore.update(deleteAllEntities());\n")),(0,o.kt)("h3",{id:"moveentity"},(0,o.kt)("inlineCode",{parentName:"h3"},"moveEntity")),(0,o.kt)("p",null,"Moves an entity within the store:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { moveEntity } from '@ngneat/elf-entities';\n\ntodosStore.update(moveEntity({ fromIndex: 0, toIndex: 1 }));\n")),(0,o.kt)("h2",{id:"idkey"},"idKey"),(0,o.kt)("p",null,"By default, Elf takes the ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," key from the entity ",(0,o.kt)("inlineCode",{parentName:"p"},"id")," field. To change it, you can pass the ",(0,o.kt)("inlineCode",{parentName:"p"},"idKey")," option to\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"withEntities")," function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createStore } from '@ngneat/elf';\nimport { addEntities } from '@ngneat/elf-entities';\n\ninterface Todo {\n  _id: number;\n  label: string;\n}\n\nconst todosStore = createStore(\n  { name: 'todos' },\n  withEntities<Todo, '_id'>({ idKey: '_id' })\n);\n")),(0,o.kt)("h2",{id:"initialvalue"},"initialValue"),(0,o.kt)("p",null,"In case that you need to start the ",(0,o.kt)("inlineCode",{parentName:"p"},"entities")," state with a value, you can specify it in the ",(0,o.kt)("inlineCode",{parentName:"p"},"initialValue")," configuration:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createStore } from '@ngneat/elf';\n\nconst store = createStore(\n  { name },\n  withEntities<Widget>({ initialValue: [{ id: 1, name: '' }] })\n);\n")))}u.isMDXComponent=!0}}]);