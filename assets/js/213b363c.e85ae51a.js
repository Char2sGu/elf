"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[697],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function a(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},s=Object.keys(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)r=s[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),u=c(r),d=o,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||s;return r?n.createElement(f,i(i({ref:t},p),{},{components:r})):n.createElement(f,i({ref:t},p))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=r.length,i=new Array(s);i[0]=d;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[u]="string"==typeof e?e:o,i[1]=a;for(var c=2;c<s;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},5666:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>a,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const s={},i="Recipes",a={unversionedId:"recipes",id:"recipes",title:"Recipes",description:"Selectors Optimization",source:"@site/docs/recipes.mdx",sourceDirName:".",slug:"/recipes",permalink:"/elf/docs/recipes",draft:!1,editUrl:"https://github.com/ngneat/elf/docusaurus/edit/main/website/docs/recipes.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Entity Events",permalink:"/elf/docs/miscellaneous/entity-events"},next:{title:"Sync State",permalink:"/elf/docs/third-party/sync-state"}},l={},c=[{value:"Selectors Optimization",id:"selectors-optimization",level:2},{value:"Reset Stores",id:"reset-stores",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"recipes"},"Recipes"),(0,o.kt)("h2",{id:"selectors-optimization"},"Selectors Optimization"),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},"Beware of premature optimizations")),(0,o.kt)("p",null,"Imagine we have a ",(0,o.kt)("inlineCode",{parentName:"p"},"todos")," store and we subscribe to the following selectors twice, at two different places simultaneously:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.repository.ts"',title:'"todos.repository.ts"'},"export const todos$ = store.pipe(selectAllEntities());\n\n// One component\nuseObservable(todos$) // React\ntodos$ | async // Angular\n\n// Second component\nuseObservable(todos$) // React\ntodos$ | async // Angular\n")),(0,o.kt)("p",null,"Due to the nature of observables, the ",(0,o.kt)("inlineCode",{parentName:"p"},"selectAllEntities()")," operator will map over the entities twice, once for each subscription. We can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"shareReplay")," operator to optimize it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.repository.ts"',title:'"todos.repository.ts"'},"import { shareReplay } from 'rxjs/operators';\n\nexport const todos$ = store.pipe(selectAllEntities(), shareReplay({ refCount: true }))\n")),(0,o.kt)("p",null,"With this change, the ",(0,o.kt)("inlineCode",{parentName:"p"},"selectAllEntities")," operator will now share the result with every subscriber."),(0,o.kt)("h2",{id:"reset-stores"},"Reset Stores"),(0,o.kt)("p",null,"Resetting your stores can be useful when you want to clean the store's data upon user logout. We can combine the ",(0,o.kt)("inlineCode",{parentName:"p"},"registry")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"store.reset()")," to create a ",(0,o.kt)("inlineCode",{parentName:"p"},"resetStores")," function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { getRegistry } from '@ngneat/elf';\n\nexport function resetStores() {\n  getRegistry().forEach(store => store.reset())\n}\n")))}m.isMDXComponent=!0}}]);