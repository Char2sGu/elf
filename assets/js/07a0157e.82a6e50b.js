"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[733],{2600:(e,t,s)=>{s.d(t,{k:()=>u});var n=s(6540),o=s(2908),a=s(5293);const r={core:{"@ngneat/elf":"latest"},entities:{"@ngneat/elf-entities":"latest"},requests:{"@ngneat/elf-requests":"latest"},pagination:{"@ngneat/elf-pagination":"latest"},devtools:{"@ngneat/elf-devtools":"latest"},persist:{"@ngneat/elf-persist-state":"latest"},history:{"@ngneat/elf-state-history":"latest"},rxjs:{rxjs:"latest"},immer:{immer:"latest"}};function u(e){let{src:t,packages:s=[]}=e;const u=(0,n.useRef)(),i=(0,n.useRef)(),l=["core","rxjs",...s],{colorMode:d}=(0,a.G)();return(0,n.useEffect)((()=>{const e=l.reduce(((e,t)=>(Object.assign(e,r[t]),e)),{});o.A.embedProject(u.current,{description:"this is descrption",title:"Elf Core",files:{"index.html":"","index.ts":t},template:"typescript",dependencies:e,settings:{compile:{clearConsole:!0}}},{hideDevTools:!1,devToolsHeight:99,theme:d,height:"500px"}).then((e=>{i.current=e.editor}))}),[]),(0,n.useEffect)((()=>{i.current&&i.current.setTheme(d)}),[d]),n.createElement("section",{style:{height:"500px"}},n.createElement("div",{ref:u}))}},8608:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>u,metadata:()=>l,toc:()=>p});var n=s(8168),o=(s(6540),s(5680));const a="import { createStore } from '@ngneat/elf';\nimport { setEntities, withEntities } from '@ngneat/elf-entities';\nimport {\n  createRequestsStatusOperator,\n  selectRequestStatus,\n  updateRequestStatus,\n  withRequestsStatus,\n} from '@ngneat/elf-requests';\nimport { fromFetch } from 'rxjs/fetch';\nimport { tap } from 'rxjs/operators';\n\ninterface Todo {\n  id: number;\n  label: string;\n}\n\nconst todosStore = createStore(\n  { name: 'todos' },\n  withEntities<Todo>(),\n  withRequestsStatus<'todos'>()\n);\n\nconst trackTodosRequestsStatus = createRequestsStatusOperator(todosStore);\n\ntodosStore.pipe(selectRequestStatus('todos')).subscribe((status) => {\n  console.log(status);\n});\n\nfunction setTodos(todos: Todo[]) {\n  todosStore.update(\n    setEntities(todos),\n    updateRequestStatus('todos', 'success')\n  );\n}\n\n// todos.service.ts\n\nfunction fecthTodos() {\n  return fromFetch<Todo[]>('https://jsonplaceholder.typicode.com/todos', {\n    selector: (response) => response.json(),\n  }).pipe(tap(setTodos), trackTodosRequestsStatus('todos'));\n}\n\nsetTimeout(() => {\n  fecthTodos().subscribe();\n}, 2000);\n";var r=s(2600);const u={},i="Status",l={unversionedId:"features/requests/requests-status",id:"features/requests/requests-status",title:"Status",description:"Using this feature, you can manage the status of API calls in your store. First, you need to install the package by",source:"@site/docs/features/requests/requests-status.mdx",sourceDirName:"features/requests",slug:"/features/requests/requests-status",permalink:"/elf/docs/features/requests/requests-status",draft:!1,editUrl:"https://github.com/ngneat/elf/docusaurus/edit/main/website/docs/features/requests/requests-status.mdx",tags:[],version:"current",frontMatter:{}},d={},p=[{value:"Queries",id:"queries",level:2},{value:"<code>selectRequestStatus</code>",id:"selectrequeststatus",level:3},{value:"<code>getRequestStatus</code>",id:"getrequeststatus",level:3},{value:"<code>selectIsRequestPending</code>",id:"selectisrequestpending",level:3},{value:"Mutations",id:"mutations",level:2},{value:"<code>updateRequestStatus</code>",id:"updaterequeststatus",level:3},{value:"<code>updateRequestsStatus</code>",id:"updaterequestsstatus",level:3},{value:"<code>clearRequestsStatus</code>",id:"clearrequestsstatus",level:3}],c={toc:p},g="wrapper";function m(e){let{components:t,...s}=e;return(0,o.yg)(g,(0,n.A)({},c,s,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("h1",{id:"status"},"Status"),(0,o.yg)("p",null,"Using this feature, you can manage the status of API calls in your store. First, you need to install the package by\nusing the CLI command ",(0,o.yg)("inlineCode",{parentName:"p"},"elf-cli install")," and selecting the requests package, or via npm:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-bash"},"npm i @ngneat/elf-requests\n")),(0,o.yg)("p",null,"To use this feature, provide the ",(0,o.yg)("inlineCode",{parentName:"p"},"withRequestsStatus")," props factory function in the ",(0,o.yg)("inlineCode",{parentName:"p"},"createStore")," call:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.repository"',title:'"todos.repository"'},"import { createStore } from '@ngneat/elf';\nimport { withEntities } from '@ngneat/elf-entities';\nimport {\n  withRequestsStatus,\n  createRequestsStatusOperator,\n} from '@ngneat/elf-requests';\n\ninterface Todo {\n  id: number;\n  label: string;\n}\n\nconst todosStore = createStore(\n  { name: 'todos' },\n  withEntities<Todo>(),\n  // You can pass the keys type\n  // highlight-next-line\n  withRequestsStatus<`todos` | `todo-${string}`>()\n);\n")),(0,o.yg)("p",null,"Now we can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"createRequestsStatusOperator")," function that takes a store and returns a custom operator. That operator takes the request key and sets its initial status to ",(0,o.yg)("inlineCode",{parentName:"p"},"pending"),". It also updates it to ",(0,o.yg)("inlineCode",{parentName:"p"},"error")," when it fails."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.repository"',title:'"todos.repository"'},"import {\n  withRequestsStatus,\n  createRequestsStatusOperator,\n} from '@ngneat/elf-requests';\n\n// ...\nconst todosStore = createStore({ name: 'todos', withEntities<Todo>(); });\n// highlight-next-line\nexport const trackTodosRequestsStatus =\n  createRequestsStatusOperator(todosStore);\n")),(0,o.yg)("p",null,"And use it with our ",(0,o.yg)("inlineCode",{parentName:"p"},"async")," source:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.service.ts"',title:'"todos.service.ts"'},"import { setTodos, trackTodosRequestsStatus } from './todos.repository';\n\nexport function fetchTodos() {\n  return http.get(todosUrl).pipe(\n    tap(setTodos),\n    // highlight-next-line\n    trackTodosRequestsStatus('todos')\n  );\n}\n")),(0,o.yg)("p",null,"Upon successful completion, the ",(0,o.yg)("inlineCode",{parentName:"p"},"success")," status must be manually set as follows:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts",metastring:'title="todos.repository.ts"',title:'"todos.repository.ts"'},"import { updateRequestStatus } from '@ngneat/elf-requests';\nimport { setTodos } from './todos.repository';\n\nexport function setTodos(todos: Todo[]) {\n  store.update(\n    addEntities(todos),\n    // highlight-next-line\n    updateRequestStatus('todos', 'success')\n  );\n}\n")),(0,o.yg)("p",null,"You need to set it manually to avoid a ",(0,o.yg)("strong",{parentName:"p"},"redundant"),' update and have the option to define what a "successful" response is.'),(0,o.yg)("p",null,"The default ",(0,o.yg)("inlineCode",{parentName:"p"},"status")," of any request is ",(0,o.yg)("inlineCode",{parentName:"p"},"idle"),". You can use the ",(0,o.yg)("inlineCode",{parentName:"p"},"initializeAsPending")," function to initialize a request as ",(0,o.yg)("inlineCode",{parentName:"p"},"pending"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"import { createStore } from '@ngneat/elf';\nimport { withEntities } from '@ngneat/elf-entities';\nimport { withRequestsStatus, initializeAsPending } from '@ngneat/elf-requests';\n\nconst todosStore = createStore(\n  { name: 'todos' },\n  withEntities<Todo>(),\n  withRequestsStatus(\n    // highlight-next-line\n    initializeAsPending('todos')\n  )\n);\n")),(0,o.yg)(r.k,{src:a,packages:["entities","requests"],mdxType:"LiveDemo"}),(0,o.yg)("br",null),"You can monitor and change the request status for your APIs using the following queries and mutations:",(0,o.yg)("h2",{id:"queries"},"Queries"),(0,o.yg)("h3",{id:"selectrequeststatus"},(0,o.yg)("inlineCode",{parentName:"h3"},"selectRequestStatus")),(0,o.yg)("p",null,"Select the status of the provided request key:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"import { selectRequestStatus } from '@ngneat/elf-requests';\n\ntodosStatus$ = store.pipe(selectRequestStatus('todos'));\n\n// This will return success when either the `todos` key or the `todo-1` key is succeeded\ntodoStatus$ = store.pipe(selectRequestStatus('todo-1', { groupKey: 'todos' }));\n")),(0,o.yg)("h3",{id:"getrequeststatus"},(0,o.yg)("inlineCode",{parentName:"h3"},"getRequestStatus")),(0,o.yg)("p",null,"Get the status of the provided request key:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"import { getRequestStatus } from '@ngneat/elf-requests';\n\ntodosStatus = store.query(getRequestStatus('todos'));\n")),(0,o.yg)("h3",{id:"selectisrequestpending"},(0,o.yg)("inlineCode",{parentName:"h3"},"selectIsRequestPending")),(0,o.yg)("p",null,"Select whether the status of the provided request key is ",(0,o.yg)("inlineCode",{parentName:"p"},"pending"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"import { selectIsRequestPending } from '@ngneat/elf-requests';\n\npending$ = store.pipe(selectIsRequestPending('todos'));\n")),(0,o.yg)("h2",{id:"mutations"},"Mutations"),(0,o.yg)("h3",{id:"updaterequeststatus"},(0,o.yg)("inlineCode",{parentName:"h3"},"updateRequestStatus")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"import { updateRequestStatus } from '@ngneat/elf-requests';\n\nstore.update(updateRequestStatus('todos', 'idle'));\nstore.update(updateRequestStatus('todos', 'pending'));\nstore.update(updateRequestStatus('todos', 'success'));\nstore.update(updateRequestStatus('todos', 'error', error));\n")),(0,o.yg)("h3",{id:"updaterequestsstatus"},(0,o.yg)("inlineCode",{parentName:"h3"},"updateRequestsStatus")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"import { updateRequestsStatus } from '@ngneat/elf-requests';\n\nstore.update(\n  updateRequestsStatus({\n    keyOne: {\n      value: 'success',\n    },\n  })\n);\n\nstore.update(updateRequestsStatus(['keyOne', 'keyTwo'], 'success'));\nstore.update(updateRequestStatus(['keyOne', 'keyTwo'], 'error', error));\n")),(0,o.yg)("h3",{id:"clearrequestsstatus"},(0,o.yg)("inlineCode",{parentName:"h3"},"clearRequestsStatus")),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-ts"},"import { clearRequestsStatus } from '@ngneat/elf-requests';\n\nstore.update(clearRequestsStatus());\n")))}m.isMDXComponent=!0}}]);