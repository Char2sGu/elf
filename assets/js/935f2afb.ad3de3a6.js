"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"docs":[{"type":"link","label":"Installation","href":"/elf/docs/installation","docId":"installation"},{"type":"link","label":"The Store","href":"/elf/docs/store","docId":"store"},{"type":"category","label":"Design Patterns","items":[{"type":"link","label":"The Repository Pattern","href":"/elf/docs/repository","docId":"repository"},{"type":"link","label":"The Facade Pattern","href":"/elf/docs/facade","docId":"facade"}],"collapsed":true,"collapsible":true},{"type":"category","label":"Entities Management","collapsed":false,"items":[{"type":"link","label":"Entities","href":"/elf/docs/features/entities-management/entities","docId":"features/entities-management/entities"},{"type":"link","label":"UI Entities","href":"/elf/docs/features/entities-management/ui-entities","docId":"features/entities-management/ui-entities"},{"type":"link","label":"Active ID(s)","href":"/elf/docs/features/entities-management/active-ids","docId":"features/entities-management/active-ids"},{"type":"link","label":"Entities Props Factory","href":"/elf/docs/features/entities-management/entities-props-factory","docId":"features/entities-management/entities-props-factory"}],"collapsible":true},{"type":"link","label":"Requests Result","href":"/elf/docs/features/requests-result","docId":"features/requests-result"},{"type":"link","label":"Pagination","href":"/elf/docs/features/pagination","docId":"features/pagination"},{"type":"link","label":"Persist State","href":"/elf/docs/features/persist-state","docId":"features/persist-state"},{"type":"category","label":"History","collapsed":false,"items":[{"type":"link","label":"State History","href":"/elf/docs/features/history/","docId":"features/history/history"},{"type":"link","label":"Entities State History","href":"/elf/docs/features/history/entities-history","docId":"features/history/entities-history"}],"collapsible":true},{"type":"link","label":"DevTools","href":"/elf/docs/dev-tools","docId":"dev-tools"},{"type":"link","label":"Using Immer","href":"/elf/docs/immer","docId":"immer"},{"type":"link","label":"CLI","href":"/elf/docs/cli","docId":"cli"},{"type":"link","label":"Managing Side Effects","href":"/elf/docs/side-effects","docId":"side-effects"},{"type":"category","label":"Miscellaneous","collapsed":false,"items":[{"type":"link","label":"Production Mode","href":"/elf/docs/miscellaneous/production","docId":"miscellaneous/production"},{"type":"link","label":"Props Factory","href":"/elf/docs/miscellaneous/props-factory","docId":"miscellaneous/props-factory"},{"type":"link","label":"Operators","href":"/elf/docs/miscellaneous/operators","docId":"miscellaneous/operators"},{"type":"link","label":"Registry","href":"/elf/docs/miscellaneous/registry","docId":"miscellaneous/registry"},{"type":"link","label":"Hooks","href":"/elf/docs/miscellaneous/hooks","docId":"miscellaneous/hooks"},{"type":"link","label":"Batching","href":"/elf/docs/miscellaneous/batching","docId":"miscellaneous/batching"}],"collapsible":true},{"type":"link","label":"Recipes","href":"/elf/docs/recipes","docId":"recipes"},{"type":"category","label":"Third Party Libraries","collapsed":false,"items":[{"type":"link","label":"Sync State","href":"/elf/docs/third-party/sync-state","docId":"third-party/sync-state"}],"collapsible":true},{"type":"category","label":"Troubleshooting","collapsed":false,"items":[{"type":"link","label":"Stale emission","href":"/elf/docs/troubleshooting/stale-emission","docId":"troubleshooting/stale-emission"}],"collapsible":true},{"type":"link","label":"FAQ","href":"/elf/docs/faq","docId":"faq"}]},"docs":{"cli":{"id":"cli","title":"CLI","description":"Elf comes with a CLI that enables a fast and easy setup of your store. It offers the following commands:","sidebar":"docs"},"dev-tools":{"id":"dev-tools","title":"DevTools","description":"Elf provides built-in integration with the Redux DevTools Chrome extension.","sidebar":"docs"},"facade":{"id":"facade","title":"The Facade Pattern","description":"A Facade is a simple public interface that hides more complex usage. Facades encapsulate all interactions in one place, including queries, updates, and side effects, allowing components to only ever interact with the Facade.","sidebar":"docs"},"faq":{"id":"faq","title":"FAQ","description":"Browser Support","sidebar":"docs"},"features/entities-management/active-ids":{"id":"features/entities-management/active-ids","title":"Active ID(s)","description":"This feature requires the withEntities to be used in the Store. It lets you hold one or more IDs indicating the entities that are currently active. It is often useful","sidebar":"docs"},"features/entities-management/entities":{"id":"features/entities-management/entities","title":"Entities","description":"This feature enables the store to act as an entities store. You can think of an entities state as a table in a database,","sidebar":"docs"},"features/entities-management/entities-props-factory":{"id":"features/entities-management/entities-props-factory","title":"Entities Props Factory","description":"There are two built-in entities props included in Elf - withEntities and UIEntities. In addition to that, we can create our own entities props for our stores.","sidebar":"docs"},"features/entities-management/ui-entities":{"id":"features/entities-management/ui-entities","title":"UI Entities","description":"This feature allows the store to hold UI-specific entity data, for instance, whether the user has opened the card representing an entity.","sidebar":"docs"},"features/history/entities-history":{"id":"features/history/entities-history","title":"Entities State History","description":"The entitiesStateHistory function provides a convenient way for undo and redo functionality for specific entity, saving you the trouble of maintaining a history of the entity yourself.","sidebar":"docs"},"features/history/history":{"id":"features/history/history","title":"State History","description":"The stateHistory function provides a convenient way for undo and redo functionality, saving you the trouble of maintaining a history in the app yourself.","sidebar":"docs"},"features/pagination":{"id":"features/pagination","title":"Pagination","description":"In many cases - for example, when working with very large data-sets - we don\'t want to work with the full collection in memory.","sidebar":"docs"},"features/persist-state":{"id":"features/persist-state","title":"Persist State","description":"The persistState() function gives you the ability to persist some of the app\u2019s state, by saving it to localStorage/sessionStorage or anything that implements the StorageEngine API, and restore it after a refresh.","sidebar":"docs"},"features/requests-result":{"id":"features/requests-result","title":"Requests Result","description":"Elf provides a convenient way to track the status of async requests and combine it with your store selectors. First, you need to install the package by","sidebar":"docs"},"features/requests/requests-cache":{"id":"features/requests/requests-cache","title":"Cache","description":"Using this feature, you can manage the cache status of API calls in your store. First, you need to install the package"},"features/requests/requests-data-source":{"id":"features/requests/requests-data-source","title":"Data Source","description":"With the createRequestDataSource function, we can easily select the state of an async request from our store:"},"features/requests/requests-status":{"id":"features/requests/requests-status","title":"Status","description":"Using this feature, you can manage the status of API calls in your store. First, you need to install the package by"},"immer":{"id":"immer","title":"Using Immer","description":"When working with immutable objects, we often get to what\u2019s called a \u201cspread hell\u201d situation. If you prefer working with immutable objects in a mutable fashion, you can use immer with Elf.","sidebar":"docs"},"installation":{"id":"installation","title":"Installation","description":"For your convenience, Elf comes with a CLI. Run the following command and choose the packages you need in your application:","sidebar":"docs"},"miscellaneous/batching":{"id":"miscellaneous/batching","title":"Batching","description":"When using the store\'s update function, you can pass multiple mutation functions:","sidebar":"docs"},"miscellaneous/entity-events":{"id":"miscellaneous/entity-events","title":"Entity Events","description":"You can listen to store entity events using the store.events$ observable:"},"miscellaneous/hooks":{"id":"miscellaneous/hooks","title":"Hooks","description":"Elf allows customizing some of the behavior via elfHooks","sidebar":"docs"},"miscellaneous/operators":{"id":"miscellaneous/operators","title":"Operators","description":"Elf provides the following operators:","sidebar":"docs"},"miscellaneous/production":{"id":"miscellaneous/production","title":"Production Mode","description":"Elf runs some additional checks to improve the user experience in development. You should disable it in production by calling enableElfProdMode:","sidebar":"docs"},"miscellaneous/props-factory":{"id":"miscellaneous/props-factory","title":"Props Factory","description":"Using propsFactory is ideal when there are a number of stores that need the same properties. For example, let\'s say we want to have a version property for each of our stores:","sidebar":"docs"},"miscellaneous/registry":{"id":"miscellaneous/registry","title":"Registry","description":"Elf keeps your stores in a registry and exposes the following functions:","sidebar":"docs"},"recipes":{"id":"recipes","title":"Recipes","description":"Selectors Optimization","sidebar":"docs"},"repository":{"id":"repository","title":"The Repository Pattern","description":"One way to use Elf is following the Repository Design Pattern. Implementing the Repository pattern is relatively simple. It\'s a file that encapsulates the store queries and mutations:","sidebar":"docs"},"side-effects":{"id":"side-effects","title":"Managing Side Effects","description":"Elf is a state management solution, and it doesn\'t force you to manage side effects in a certain way. But the same team also created companion packages that can be used with Elf to handle side effects.","sidebar":"docs"},"store":{"id":"store","title":"The Store","description":"The createStore function is used to initialize a store with a state.","sidebar":"docs"},"third-party/sync-state":{"id":"third-party/sync-state","title":"Sync State","description":"npm GitHub GitHub Repo stars","sidebar":"docs"},"troubleshooting/stale-emission":{"id":"troubleshooting/stale-emission","title":"Stale emission","description":"If you have two properties(for example filter and counter) in the store and queries for them and on subscription emission of the filter$ you\'re updating counter property then you will get stale emission. Let\'s see the code example:","sidebar":"docs"}}}')}}]);